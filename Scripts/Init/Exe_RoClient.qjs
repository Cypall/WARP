/**************************************************************************\
*                                                                          *
*   Copyright (C) 2020-2021 Neo-Mind                                       *
*                                                                          *
*   This file is a part of WARP project (specific to RO clients)           *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : Neo-Mind                                               *
*   Created Date  : 2020-11-06                                             *
*   Last Modified : 2021-07-25                                             *
*                                                                          *
\**************************************************************************/

if (typeof ROC === 'undefined')
{
	///
	/// \brief Hash that stores miscellaneous info about the Ragnarok client
	///
	ROC =
	{
		///
		/// \brief Initialize the data members from loaded exe (no seperate load method required)
		///
		init : function()
		{
			const _ = "ROC.init : ";

			$$(_ + '1.1 - Get the PHYSICAL address of "rdata.grf" & if present its a renewal client.')
			this.RGrfPhy = Exe.FindText("rdata.grf", PHYSICAL);
			this.IsRenewal = (this.RGrfPhy > 0);

			$$(_ + '1.2 - Zero clients will have the RenewSetup Zero string')
			this.IsZero = (Exe.FindText("Software\\Gravity Soft\\RenewSetup Zero", PHYSICAL, false) > 0);

			$$(_ + '1.3 - If neither then it is a main client')
			this.IsMain = !this.IsRenewal && !this.IsZero;

			$$(_ + '1.4 - Check for clients with 2010+ build date')
			this.Post2010 = Exe.BuildDate > 20100000;

			$$(_ + '1.5 - Check for Frame Pointer by searching for the characteristic PUSH EBP & MOV EBP, ESP as the first statement of a function')
			$$(_ + '      To avoid false match we will prefix sequence of INTs (some clients have NOPs instead)')
			const fromAddr = Exe.GetSectBegin(CODE);
			const toAddr = fromAddr + 0x500;

			let addr = Exe.FindHex(INT3.repeat(5) + FP_START, fromAddr, toAddr); //int3 x5 times
			                                                                     //push ebp
																				 //mov ebp, esp
			if (addr < 0)
				addr = Exe.FindHex(NOP.repeat(5) + FP_START, fromAddr, toAddr); //change each 'int3' to 'nop'

			this.HasFP = (addr > 0);
			this.StkReg = this.HasFP ? EBP : ESP;

			$$(_ + '1.6 - Check the build date & Zero status for Hidden Login Window')
			this.HasLWhidden = Exe.BuildDate > 20100803 && (Exe.BuildDate < 20171018 || (Exe.BuildDate < 20181114 && !this.IsZero));

			$$(_ + '1.7 - Check for packet key presence')
			this.HasPktKeys = Exe.BuildDate >= 20110817;

			$$(_ + '2.1 - Get the address of "NC_CashShop", Roulette bmp string & "adventurerAgency"')
			this.CashShopAddr = Exe.FindText("NC_CashShop");
			this.RouletteAddr = Exe.FindText("\xC0\xAF\xC0\xFA\xC0\xCE\xC5\xCD\xC6\xE4\xC0\xCC\xBD\xBA\\basic_interface\\roullette\\RoulletteIcon.bmp", CASE_INSENSITIVE);
			this.AdvAgencyAddr = Exe.FindText("adventurerAgency");

			$$(_ + '2.2 - Get the addresses of the respective imported functions (used commonly in various patches)')
			this.GetModHandle = Exe.FindFunc("GetModuleHandleA", "KERNEL32.dll");
			this.GetProcAddr  = Exe.FindFunc("GetProcAddress", "KERNEL32.dll");
			this.OutDbgStrA   = Exe.FindFunc("OutputDebugStringA");
			this.MsgBoxA      = Exe.FindFunc("MessageBoxA", "USER32.dll");

			$$(_ + '2.3 - Get the address of "KERNEL32.dll"')
			this.Kernel32 = Exe.FindText("KERNEL32.dll", CASE_INSENSITIVE);
			if (this.Kernel32 < 0)
				this.Kernel32 = Exe.FindText("KERNEL32.dll", CASE_INSENSITIVE, false); // new clients have it in small letters (but we will search insensitively)
			                                                                          // and not necessarily seperated from previous string with a NULL

			$$(_ + '2.4 - Set the base name')
			this.BaseName = System.BaseName(Exe.FilePath);

			$$(_ + '2.5 - Keep other members undefined')
			delete this.ImpInfo ; //will be used & loaded only by Custom DLL & HShield patches
			delete this.RsrcTree; //will be used & loaded only by Custom Icon patches (for now).

			IdentifyObj("ROC");
		},
	};
}

///
/// \brief Initialize when Exe is loaded (only load the object in relevant patches)
///
ROC.init();
