/**************************************************************************\
*                                                                          *
*   Copyright (C) 2020-2021 Neo-Mind                                       *
*                                                                          *
*   This file is a part of WARP project                                    *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : Neo-Mind                                               *
*   Created Date  : 2020-10-30                                             *
*   Last Modified : 2021-03-01                                             *
*                                                                          *
\**************************************************************************/

///
/// \brief Convenience class for representing a ModR/M byte
///
if (typeof ModRM === 'undefined') //avoid redefinition
{
	ModRM = class
	{
		///
		/// \brief Constructor
		///	
		constructor(data)
		{
			let parts = ParseData(data, false);
			if (parts.length === 4)
			{
				this.Mode = parts[0];
				this.RgOp = parts[1];
				this.RegM = parts[2];

				this.Data = parts[3];
			}
			else
			{
				this.Data = -1;
			}
		}

		///
		/// \brief Method to check whether current 'ModRM' needs an SIB byte
		///
		needSIB()
		{
			if (IsNum(this.Mode) && this.Mode !== 3)
			{
				return (
					(IsNum(this.RegM) && this.RegM === ESP.Index) ||
					(IsReg(this.RegM) && this.RegM.Index === ESP.Index)
				);
			}

			return false;
		}

		///
		/// \brief 'Static' Method to create a 'ModRM' object from its components
		///
		static FromParts(mode, ro, rm)
		{
			/// 1.1 - Check for hex strings in RegOp
			if (IsStr(ro)) //WildCard + Direct Hex
				return new this(ro);

			/// 1.2 - Check for hex strings in RegM
			if (IsStr(rm)) //WildCard + Direct Hex
				return new this(rm);

			/// 2.1 - If all the arguments are provided then create Instance with them
			if (arguments.length === 3)
				return new this([mode, ro, rm]);

			/// 2.2 - Otherwise return an empty modrm
			return new this(0);
		}

		///
		/// \brief toString override
		///
		toString()
		{
			return `Data = ${this.Data} {Mode = ${this.Mode}, RegOp = ${this.RgOp}, RegM = ${this.RegM}}`;
		}
	};

	IdentifyClass(ModRM, ["Mode", "RgOp", "RegM", "Data"]);
}
