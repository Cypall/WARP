/**************************************************************************\
*                                                                          *
*   Copyright (C) ?-2015 Shinryo, Ai4rei/AN                                *
*                                                                          *
*   This file is a part of WARP project (specific to RO clients)           *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : Shinryo, Ai4rei/AN                                     *
*   Created Date  : 2020-11-11                                             *
*   Last Modified : 2021-07-04                                             *
*                                                                          *
\**************************************************************************/

///
/// \brief Check for Existing Multiple Window Checker and enforce Disabling.
///        If not present, inserts custom code to do the check + disable
///
NoMultiWindow = function()
{
	let _ = 'NoMultiWindow : ';

	$$(_ + '1.1 - Find CoInitialize function address')
	let CoInit = Exe.FindFunc("CoInitialize", "ole32.dll");
	if (CoInit < 0)
		throw Error("CoInitialize not found");

	$$(_ + '1.2 - Find where it is CALLed from')
	let prefix = PUSH_R;         //push regA
	let suffix = CALL([CoInit]); //call dword ptr [<&ole32.CoInitialize>]

	let addr = Exe.FindHex(prefix + suffix);

	if (addr < 0) //almost all version use PUSH 0 for some dates, hence cant restrict based on version
	{
		prefix = PUSH_0; //Change push regA to push 0
		addr = Exe.FindHex(prefix + suffix);
	}
	if (addr < 0)
		throw Error("CoInitialize not CALLed");

	$$(_ + '1.3 - Point addr to location of the CALL')
	let jmpAddr = addr + prefix.byteCount();

	$$(_ + '1.4 - Find CreateMutexA CALL after the CoInitialize CALL')
	addr = Exe.FindFunc("CreateMutexA", "KERNEL32.dll");
	if (addr > 0)
	{
		$$(_ + '1.5 - If present then check if its used (then we dont need to add our own code)')
		addr = Exe.FindHex( CALL([addr]), jmpAddr, jmpAddr + 0xD0 );

		if (addr > 0)
		{
			$$(_ + '1.6 - If the code after the CALL is MOV EAX , [] change it to assign FFFFFF instead')
			if (Exe.Version < 10 && Exe.GetUint8(jmpAddr + 6) === 0xA1)
			{
				Exe.SetHex(jmpAddr + 6, MOV(EAX, 0xFFFFFF))
				return true;
			}
			else
			{
				Cancel("Already disabled");
			}
		}
	}

	$$(_ + '2.1 - Get the essential addresses for our function')
	if (ROC.GetModHandle < 0)
		throw Error("GetModuleHandleA not found");

	if (ROC.GetProcAddr < 0)
		throw Error("GetProcAddress not found");

	let WaitSingle = Exe.FindFunc("WaitForSingleObject", "KERNEL32.dll");
	if (WaitSingle < 0)
		throw Error("WaitForSingleObject not found");

	if (ROC.Kernel32 < 0)
		throw Error("'KERNEL32.dll' not found");

	$$(_ + '2.2 - Prepare our function for mutex windows')
	let parts =
	[
		CALL([CoInit])                 //call dword ptr [&ole32.CoInitialize>] ; args are already pushed
	+	PUSH(ESI)                      //push esi
	+	XOR(ESI, ESI)                  //xor esi, esi
	+	PUSH(ROC.Kernel32)             //push offset "KERNEL32.dll"
	+	CALL([ROC.GetModHandle])       //call dword ptr [<&KERNEL32.GetModuleHandleA>]
	+	CALL(0x0D)                     //push &JMP
	+	"CreateMutexA\x00".toHex()     //db "CreateMutexA", 0
	+	PUSH_EAX                       //push eax
	+	CALL([ROC.GetProcAddr])        //call dword ptr [<&KERNEL32.GetProcAddress>]
	+	CALL(0x0F)                     //push &JMP
	+	"Global\\Surface\x00".toHex()  //db "Global\Surface",0
	+	PUSH(ESI)                      //push esi
	+	PUSH(ESI)                      //push esi
	+	CALL(EAX)                      //call eax
	+	TEST(EAX, EAX)                 //test eax, eax
	+	JE(Filler(1,1))                //je short _quit
	+	PUSH(ESI)                      //push esi
	+	PUSH_EAX                       //push eax
	+	CALL([WaitSingle])             //call dword ptr [<&KERNEL32.WaitForSingleObject>]
	+	CMP(EAX, 258)                  //cmp eax, 102h ; 258 = WAIT_TIMEOUT
	+	JNZ(Filler(2,1))               //jnz short _return

	,//1
		PUSH(ROC.Kernel32)             //push offset "KERNEL32.dll" ; _quit
	+	CALL([ROC.GetModHandle])       //call dword ptr [<&KERNEL32.GetModuleHandleA>]
	+	CALL(0x0C)                     //push &JMP
	+	"ExitProcess\x00".toHex()      //db "ExitProcess", 0
	+	PUSH_EAX                       //push eax
	+	CALL([ROC.GetProcAddr])        //call dword ptr [<&KERNEL32.GetProcAddress>]
	+	PUSH(ESI)                      //push esi
	+	CALL(EAX)                      //call eax

	,//2
		POP(ESI)                       //pop esi ; _return
	+	JMP(Filler(3))                 //jmp <retnAddr> ; retnAddr = jmpAddr + 6
	];

	let offsets = MapAddrs(0, parts);

	$$(_ + '2.3 - Allocate space to add our function')
	let [free, freeVir] = Exe.FindSpace(offsets.last(), 0x10);

	$$(_ + '2.4 - Fill in the blanks')
	let code = SetFillTargets(parts, {
		1: offsets[1], //_quit
		2: offsets[2], //_return
	},
	1, 1);

	code = SetFillTarget(code, 3, Exe.Phy2Vir(jmpAddr + 6, CODE), freeVir, 1);

	$$(_ + '2.5 - Add function at the allocated space')
	Exe.AddHex(free, code);

	$$(_ + '2.6 - Create JMP followed by 1 NOP to the function at jmpAddr')
	Exe.SetJMP(jmpAddr, freeVir, 1);

	return true;
};
