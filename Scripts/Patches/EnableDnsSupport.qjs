/**************************************************************************\
*                                                                          *
*   Copyright (C) ?-2015 Shinryo                                           *
*   Copyright (C) 2020-2021 Neo-Mind                                       *
*                                                                          *
*   This file is a part of WARP project (specific to RO clients)           *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : Shinryo, Neo-Mind                                      *
*   Created Date  : 2020-11-11                                             *
*   Last Modified : 2021-10-26                                             *
*                                                                          *
\**************************************************************************/

///
/// \brief Make the client call our DNS resolution function before g_accountAddr is accessed.
///        Function replaces g_accountAddr value
///
EnableDnsSupport = function()
{
	const _ = 'EnableDnsSupport : ';

	$$(_ + '1.1 - Ensure the WINMGR object has been loaded')
	WINMGR.load();

	$$(_ + '1.2 - Find the common IP address across all clients')
	let addr = Exe.FindText("211.172.247.115");
	if (addr < 0)
		throw Error("Common IP not found");

	$$(_ + '1.3 - Find the g_accountAddr assignment to the IP')
	addr = Exe.FindHex( MOV([POS3WC], addr) ); //mov dword ptr [g_accountAddr], offset "211.172.247.115"
	if (addr < 0)
		throw Error("g_accountAddr assignment not found");

	$$(_ + '1.4 - Extract g_accountAddr')
	const AccountAddr = Exe.GetHex(addr + 2, 4);

	$$(_ + '2.1 - Find the code to hook our function to')
	let prefix =
		CALL(NEG3WC)             //call g_resMgr
	+	MOV(ECX, EAX)            //mov ecx, eax
	+	CALL(NEG3WC)             //call CResMgr::Get
	+	PUSH_EAX                 //push eax
	+	WINMGR.MovECX            //mov ecx, <g_windowMgr>
	+	CALL(NEG3WC)             //call UIWindowMgr::SetWallpaper
	;

	let suffix = MOV(
		Exe.Version === 9 || Exe.Version === 10 ? EAX : R32, //mov eax, dword ptr [g_accountAddr]
		                                                     //   OR
		[AccountAddr]                                        //mov regB, dword ptr [g_accountAddr]
	);

	addr = Exe.FindHex(prefix + suffix);

	if (addr < 0 && Exe.BuildDate > 20180000)
	{
		suffix =
			MOV(ECX, [POS4WC])   //mov ecx, dword ptr [g_CCheatDefenderMgr]
		+	CALL(ALLWC)          //call CCheatDefenderMgr::init
		+	suffix               //mov regB, dword ptr [g_accountAddr]
		;
		addr = Exe.FindHex(prefix + suffix);
	}
	if (addr < 0)
		throw Error("Function not found");

	$$(_ + '2.2 - Extract g_resMgr')
	const g_resMgr = Exe.GetTgtAddr(addr + 1);

	$$(_ + '3.1 - Find some essential addresses for our function')

	// gethostbyname
	const GetHostByName = Exe.FindFunc("gethostbyname", 52, "ws2_32.dll");//(#52 when imported by ordinal)
	if (GetHostByName < 0)
		throw Error("gethostbyname function not found");

	// printFunc
	ROC.findImports();

	// IP address format
	const IPformat = Exe.FindText("%d.%d.%d.%d");
	if (IPformat < 0)
		throw Error("IP format not found");

	$$(_ + '3.2 - Setup the ipaddress')
	const [, ipAddr] = Exe.Allocate(15); //3 dots + 4 * 3 digits

	$$(_ + '3.3 - Construct our code')
	prefix =
		CALL(Filler(1))                 //call g_resMgr ; call the actual function that was supposed to be run
	+	PUSHAD                          //pushad
	+	MOV(ESI, [AccountAddr])         //mov esi, dword ptr [g_accountAddr]
	+	PUSH(ESI)                       //push esi
	+	CALL([GetHostByName])           //call dword ptr [<&WS2_32.#52>] ; WS2_32.gethostbyname()
	+	MOV(ECX, [EAX, 0xC])            //mov ecx, dword ptr [eax+0Ch]
	+	MOV(EDX, [ECX])                 //mov edx, dword ptr [ecx]
	+	MOV(EAX, EDX)                   //mov eax, edx
	+	MOVZX(ECX, BYTE_PTR, [EAX, 3])  //movzx ecx, byte ptr [eax+3]
	+	PUSH(ECX)                       //push ecx
	+	MOVZX(ECX, BYTE_PTR, [EAX, 2])  //movzx ecx, byte ptr [eax+2]
	+	PUSH(ECX)                       //push ecx
	+	MOVZX(ECX, BYTE_PTR, [EAX, 1])  //movzx ecx, byte ptr [eax+1]
	+	PUSH(ECX)                       //push ecx
	+	MOVZX(ECX, BYTE_PTR, [EAX])     //movzx ecx, byte ptr [eax]
	+	PUSH(ECX)                       //push ecx
	+	PUSH(IPformat)                  //push offset "%d.%d.%d.%d"
	+	PUSH(ipAddr)                    //push <ipAddr>
	+	CALL([ROC.SprintF])             //call dword ptr [<printFunc>] ; sprintf/wsprintfA
	+	ADD(ESP, 0x18)                  //add esp, 18h
	+	MOV([AccountAddr], ipAddr)      //mov dword ptr [g_accountAddr], <ipAddr> ; Replace g_accountAddr current value with its ip address
	+	POPAD                           //popad
	+	RETN()                          //retn
	;

	$$(_ + '3.3 - Prepare the arguments for auto-hook')
	const args =
	{
		targets : { 1 : g_resMgr },
		isCall : true
	};

	$$(_ + '3.4 - Add our code and call it from addr')
	AutoHook(addr, prefix, args);

	return true;
};
