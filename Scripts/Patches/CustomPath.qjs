/**************************************************************************\
*                                                                          *
*   Copyright (C) 2013-2021 Neo-Mind                                       *
*   Copyright (C) 2018-2021 Jian                                           *
*   Copyright (C) 2017 Secret                                              *
*   Copyright (C) 2017-2021 Andrei Karas (4144)                            *
*   Copyright (C) 2020-2021 X-EcutiOnner                                   *
*                                                                          *
*   This file is a part of WARP project (specific to RO clients)           *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : Neo-Mind, Jian, Secret, Andrei (4144), X-EcutiOnner    *
*   Created Date  : 2020-11-09                                             *
*   Last Modified : 2021-08-27                                             *
*                                                                          *
\**************************************************************************/

///
/// \brief Common function to change specific file paths
///
CustomPath = function(patchName)
{
	const _ = patchName + ' : ';

	$$(_ + '1.1 - Ensure \'Disable BGM\' is not selected (unless in test mode)')
	if (!Warp.TestMode && patchName === 'CustomDefaultBGM')
		Warp.SetPatchState("NoBGMAudio", false);

	$$(_ + '1.2 - Retrieve the data for the index')
	const {varName, prefix, strType, name, nameAddr} = this.Data.get(patchName);

	$$(_ + '1.3 - Find location where the string is used in a PUSH')
	const addr = Exe.FindHex( PUSH(nameAddr) );
	if (addr < 0)
		throw Error(`'${name} not used`);

	$$(_ + '1.4 - Get the new file name from user')
	const suf = strType === "Prefix" ? "without .lub" : "";
	const newStr = Exe.GetUserInput(
		varName, D_Text, `File ${strType}`,
		`Enter the new <b>${prefix} ${strType}</b> (relative to RO folder) ${suf}`,
		name, {minLen: 1, maxLen: 100}
	);

	if (newStr === false)
		Cancel(strType, name);

	$$(_ + '2.1 - Allocate space to add the file name')
	const [free, freeVir] = Exe.FindSpace(varName);

	$$(_ + '2.2 - Add the name there')
	Exe.AddFromVar(free, varName);

	$$(_ + '2.3 - Update the PUSHed address')
	Exe.SetUint32(addr + 1, freeVir);

	return true;
};

///
/// \brief Common functions to validate
///
CustomPath.validate = function(patchName)
{
	let data = this.Data.get(patchName);

	if ('parts' in data) //need to derive the name from parts and then find its address.
	{
		const [pref, sakSuf, truSuf, suf] = data.parts;

		let name = pref + "_" + (ROC.IsRenewal ? sakSuf : truSuf);
		let addr = Exe.FindText(name, CASE_INSENSITIVE);

		if (addr < 0)
		{
			name = pref + suf;
			addr = Exe.FindText(name, CASE_INSENSITIVE);
		}

		if (addr > 0)
		{
			data.nameAddr = addr;
			data.name = name;
			return true;
		}
	}
	else //name is provided directly
	{
		const addr = Exe.FindText(data.name, CASE_INSENSITIVE);
		if (addr > 0)
		{
			data.nameAddr = addr;
			return true;
		}
	}

	return false;
};

///
/// Wrappers for Individual Patches
///
CustomDefaultBGM       = CustomPath;
CustomItemInfoLub      = CustomPath;
CustomAchieveLub       = CustomPath;
CustomTownInfoLub      = CustomPath;
CustomPetEvoClnLub     = CustomPath;
CustomTipboxLub        = CustomPath;
CustomCheckAttLub      = CustomPath;
CustomPrivAirplaneLub  = CustomPath;
CustomMapInfoLub       = CustomPath;
CustomOngQuestInfoLub  = CustomPath;
CustomRcmdQuestInfoLub = CustomPath;

CustomMonSizeEffLub = patchName => CustomPath.self_call(patchName);

CustomMonSizeEffLub.validate = function(patchName)
{
	const suf = (ROC.IsRenewal ? "_sak" : "");

	let name = "System/monster_size_effect" + suf + "_new.lub";
	let addr = Exe.FindText(name, CASE_INSENSITIVE);
	if (addr < 0)
	{
		name = "System/monster_size_effect" + suf + ".lub";
		addr = Exe.FindText(name, CASE_INSENSITIVE);
	}

	if (addr > 0)
	{
		let data = CustomPath.Data.get(patchName);
		data.nameAddr = addr;
		data.name = name;

		return true;
	}

	return false;
};

///
/// \brief Data to be used for the above patches
///
CustomPath.Data = MakeMap(
	'CustomDefaultBGM',
	{
		strType : "Path",
		varName : '$newBGMPath',
		prefix : "Default BGM",
		name : "bgm\\01.mp3"
	},

	'CustomItemInfoLub',
	{
		strType : "Path",
		varName : '$newItemInfo',
		prefix : "ItemInfo Lua",
		parts : ["System/iteminfo", "Sak.lub", "true.lub", ".lub"]
	},

	'CustomAchieveLub',
	{
		strType : "Path",
		varName : '$newAchieveList',
		prefix : "Achievement List Lua",
		name : "system\\Achievement_list.lub"
	},

	'CustomMonSizeEffLub',
	{
		strType : "Path",
		varName : '$newMonSizeEffect',
		prefix : "Monster Size Effect Lua"
	},

	'CustomTownInfoLub',
	{
		strType : "Path",
		varName : '$newTownInfo',
		prefix : "Town Info Lua",
		name : "System/Towninfo.lub"
	},

	'CustomPetEvoClnLub',
	{
		strType : "Path",
		varName : '$newPetEvoCln',
		prefix : "Pet Evolution Lua",
		parts : ["system\\PetEvolutionCln", "sak.lub", "true.lub", ".lub"]
	},

	'CustomTipboxLub',
	{
		strType : "Path",
		varName : '$newTipBox',
		prefix : "Tip Box Lua",
		name : "System/tipbox.lub"
	},

	'CustomCheckAttLub',
	{
		strType : "Path",
		varName : '$newCheckAtt',
		prefix : "Check Attendance Lua",
		name : "System/CheckAttendance.lub"
	},

	'CustomPrivAirplaneLub',
	{
		strType : "Path",
		varName : '$newPrivAirplane',
		prefix : "Private Airplane Lua",
		parts : ["System\\PrivateAirplane", "Sakray.lub", "True.lub", ""]
	},

	'CustomMapInfoLub',
	{
		strType : "Path",
		varName : '$newMapInfo',
		prefix : "MapInfo Lua",
		parts : ["system\\mapInfo", "sak.lub", "true.lub", ""]
	},

	'CustomOngQuestInfoLub',
	{
		strType : "Prefix",
		varName : '$newOngQInfoList',
		prefix : "Ongoing QuestInfoList Lua",
		parts : ["system\\OngoingQuestInfoList", "Sakray", "True", ""]
	},

	'CustomRcmdQuestInfoLub',
	{
		strType : "Prefix",
		varName : '$newRcmdQInfoList',
		prefix : "Recommended QuestInfoList Lua",
		parts : ["system\\RecommendedQuestInfoList", "Sakray", "True", ""]
	},
);

///
/// \brief Change the "..\\licence.txt" & the EULA error string reference to user specified file
///
Orig_LicTxt = "..\\licence.txt";
CustomLicenseTxt = function()
{
	const _ = 'CustomLicenseTxt : ';

	$$(_ + '1.1 - Find \'..\\licence.txt\'')
	let addr = Exe.FindText(Orig_LicTxt, CASE_INSENSITIVE);
	if (addr < 0)
		throw Error(`'${Orig_LicTxt}' not found`);

	$$(_ + '1.2 - Find where it is assigned')
	addr = Exe.FindHex( MOV([POS3WC], addr) ); //MOV DWORD PTR DS:[g_licence], stringAddr
	if (addr < 0)
		throw Error(`'${Orig_LicTxt}' not assigned`);

	$$(_ + '2.1 - Get new Filename from user')
	const varName = '$licenseTXT';
	const newFile = Exe.GetUserInput(varName, D_Text, "License file", "Enter the name of the Txt file", Orig_LicTxt, {minLen: 9, maxLen: 14});
	if (newFile === false)
		Cancel("License file", Orig_LicTxt);

	$$(_ + '2.2 - Allocate space to add new file name')
	let [free, freeVir] = Exe.FindSpace(varName);

	$$(_ + '2.3 - Add the file name there')
	Exe.AddFromVar(free, varName);

	$$(_ + '2.4 - Change the address in the assignment')
	Exe.SetInt32(addr + 6, freeVir);

	$$(_ + '3.1 - Find EULA string')
	addr = Exe.FindText("No EULA text file. (licence.txt)");
	if (addr < 0)
		throw Error("EULA string not found");

	$$(_ + '3.2 - Prepare the new EULA error string using the filename received')
	const eulaString = "No EULA text file. (" + newFile.replace("..\\", "") + ")\x00";

	$$(_ + '3.3 - Allocate space to add the EULA error string');
	[free, freeVir] = Exe.FindSpace(eulaString.length);

	$$(_ + '3.4 - Add the EULA error string')
	Exe.AddText(free, eulaString);

	$$(_ + '3.5 - Update all PUSHes & assigments using the original EULA error string')
	const found = [
		PUSH(0x20) + PUSH(addr),
		JMP(0x10) + PUSH(addr),
		MOV(ESI, addr),
		MOV(EDI, addr)
	].filter( code =>
	{
		const addrs = Exe.FindHexN(code);
		if (addrs.isEmpty())
			return false;

		const csize = code.byteCount();
		for (const addr of addrs)
			Exe.SetInt32(addr + csize - 4, freeVir);

		return true;
	});

	if (found.isEmpty())
		throw Error("No EULA references found");

	return true;
};

///
/// \brief Change the clientinfo.xml reference to custom file specified by user
///
CustomClientInfo = function()
{
	const _ = 'CustomClientInfo : ';

	$$(_ + '1.1 - Ensure the DGRF object is loaded')
	DGRF.load();

	$$(_ + '1.2 - Retrieve the refAddr (PUSH location) & calculate the end address')
	const fromAddr = DGRF.RefAddr;
	const toAddr = fromAddr + 0x100; //may not need this much

	$$(_ + '1.3 - Find where the XML is referenced')
	const nameAddr = this.NameAddr;

	let patterns;
	if (Exe.Version > 10.0) //VC11+
	{
		patterns = [
			MOVQ(XMM$, [nameAddr]),  //movq xmmA, qword ptr [nameAddr]
			MOVUPS(XMM$, [nameAddr]) //movups xmmA, dword ptr [nameAddr]
		];
	}
	else
	{
		patterns = [
			MOV(R32, [nameAddr]), //mov regA, dword ptr [nameAddr]
			MOV(EAX, [nameAddr]), //mov eax, dword ptr [nameAddr]
			MOV(R32, nameAddr)    //mov regA, <nameAddr>
		];
	}

	const result = patterns.findAs( (pat, index) =>
	{
		const found = Exe.FindHex(pat, fromAddr, toAddr);
		if (found > 0)
			return [found + pat.byteCount() - 4, index < patterns.length - 1]; //first element is the position of the nameAddr, second indicates there are more addresses for replacement
	});

	if (!result)
		throw Error("clientinfo not used");

	const [addr, hasMore] = result;

	$$(_ + '1.4 - Add the address & displacement offset to repLocs')
	let repLocs = new Map();
	repLocs.set(0, addr);

	$$(_ + '1.5 - Find the additional references & save the locations where replacement need to be made')
	if (hasMore)
	{
		let has4th = true;
		if (Exe.Version > 10.0)//VC11+
		{
			if (this.Name === "sclientinfo.xml")
			{
				let addr = Exe.FindHex(MOVSS(XMM$, [nameAddr + 8]), fromAddr, toAddr); //movss xmmA, qword ptr [nameAddr + 8]
				if (addr < 0)
				{
					has4th = false; //already takes care of the 4th part because 8 bytes are retrieved
					addr = Exe.FindHex(MOVQ(XMM$, [nameAddr + 8]), fromAddr, toAddr); //movq xmmA, qword ptr [nameAddr + 8]
				}
				if (addr < 0)
					throw Error("2nd reference missing");

				repLocs.set(8, addr + 4);
			}
			else
			{
				let addr = Exe.FindHex(MOV(EAX, [nameAddr + 8]), fromAddr, toAddr); //mov eax, dword ptr [nameAddr + 8]
				if (addr < 0)
					throw Error("2nd reference missing");

				repLocs.set(8, addr + 1);

				addr = Exe.FindHex(MOV(AX, [nameAddr + 0xC]), fromAddr, toAddr); //mov ax, word ptr [nameAddr + 0Ch]
				if (addr < 0)
					throw Error("3rd reference missing");

				repLocs.set(0xC, addr + 2);
			}
		}
		else
		{
			[4, 8, 0xC].forEach( (disp, idx) =>
			{
				let addr = Exe.FindHex(MOV(R32, [nameAddr + disp]), fromAddr, toAddr); //mov regB, dword ptr [nameAddr + disp]
				let offset = 2;

				if (addr < 0)
				{
					addr = Exe.FindHex(MOV(EAX, [nameAddr + disp]), fromAddr, toAddr); //mov eax, dword ptr [nameAddr + disp]
					offset = 1;
				}
				if (addr < 0)
					throw Error("Reference no." + (idx + 2) + " missing");

				repLocs.set(disp, addr + offset);
			});
		}

		if (has4th)
		{
			let addr = Exe.FindHex(MOV(AL, [nameAddr + 0xE]), fromAddr, toAddr); //mov al, byte ptr [nameAddr + 0Eh]
			let offset = 1;

			if (addr < 0)
			{
				addr = Exe.FindHex(MOV(R8, [nameAddr + 0xE]), fromAddr, toAddr); //mov reg8A, byte ptr [nameAddr + 0Eh]
				offset = 2;
			}
			if (addr < 0)
				throw Error("4th reference missing");

			repLocs.set(0xE, addr + offset);
		}
	}

	$$(_ + '2.1 - Get the new name from the user')
	const varName = '$newclientinfo';
	const newFile = Exe.GetUserInput(varName, D_Text, "Client Info XML", "Enter the new clientinfo path", this.Name, {minLen: 9, maxLen: 20});
	if (newFile === false)
		Cancel("Filename", this.Name);

	$$(_ + '2.2 - Allocate space for the new name')
	const [free, freeVir] = Exe.FindSpace(varName);

	$$(_ + '2.3 - Add the name there')
	Exe.AddFromVar(free, varName);

	$$(_ + '2.4 - Adjust the references')
	for (const [disp, addr] of repLocs)
		Exe.SetUint32(addr, freeVir + disp);

	return true;
};

///
/// \brief Disable for Unsupported clients
///
CustomClientInfo.validate = function()
{
	if (Exe.BuildDate < 20081100) //skip for really old clients
		return false;

	/// 1.1 - Check if the client is Sakray (clientinfo file name is "sclientinfo.xml" for some Sakray clients)
	this.Name = "sclientinfo.xml";
	this.NameAddr = Exe.FindText(this.Name, CASE_INSENSITIVE);

	if (this.NameAddr < 0) // if sclientinfo.xml does not exist then it is a main server exe
	{
		this.Name = "clientinfo.xml";
		this.NameAddr = Exe.FindText(this.Name, CASE_INSENSITIVE);
	}

	return (this.NameAddr > 0);
};
