/**************************************************************************\
*                                                                          *
*   Copyright (C) 2020-2021 CH.C (jchcc), Neo-Mind                         *
*                                                                          *
*   This file is a part of WARP project (specific to RO clients)           *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : CH.C (jchcc), Neo-Mind                                 *
*   Created Date  : 2020-11-12                                             *
*   Last Modified : 2021-07-03                                             *
*                                                                          *
\**************************************************************************/

// TODO - Pattern for the newer clients is changed again. Need to experiment with live client

///
/// \brief Changes the dimensions being PUSHed for creating Player's HP/SP Bar
///
ResizePlayerBar = function()
{
	let _ = 'ResizePlayerBar : ';

	$$(_ + '1.1 - Find the original size PUSHes')
	let prefix =
		MOV(ECX, [R32, POS2WC])  //mov ecx, dword ptr [regA + dispA]
	+	PUSH(POS4WC)             //push immA
	+	PUSH(POS4WC)             //push immB
	+	CALL(ALLWC)              //call func#1
	+	MOV(ECX, [R32, POS2WC])  //mov ecx, dword ptr [regA + dispA]
	;

	let suffix =
		PUSH(9)                  //push 9
	+	PUSH(0x3C)               //push 3Ch
	;

	let addr = Exe.FindHex(prefix + suffix);
	if (addr < 0 && Exe.Version === 6) //VC6 2nd form
	{
		prefix =
			MOV([R32, POS1WC], R32) //mov dword ptr [regB + dispB], regC
		+	MOV(ECX, [R32, POS2WC]) //mov ecx, dword ptr [regA + dispC]
		;
		addr = Exe.FindHex(prefix + suffix);
	}
	if (addr < 0)
		throw Error("Size PUSHes missing");

	let sizeAddr = addr + prefix.byteCount();

	$$(_ + '1.2 - Find the reference assignment before the half width subtraction')
	let addrs = Exe.FindHexN( MOV([EAX, WCp], 0x32FF32) );    //mov dword ptr [eax + disp8D], 32FF32h
	if (addrs.isEmpty())
	{
		addrs = Exe.FindHexN( MOV([EAX, POS2WC], 0x32FF32) ); //mov dword ptr [eax + dispD], 32FF32h
	}
	if (addrs.length !== 2)
		throw Error("Invalid no of matches found");

	$$(_ + '1.3 - Now find the subtraction after it. The pattern changes a lot between 2008 - 2019 so this is the only foolproof way')

	let halfAddr = -1;
	let MovEAX = MOV(EAX, 0x88888889); //mov eax, 88888889h

	addrs.find( addr =>
	{
		let addr2 = Exe.FindHex(MovEAX, addr + 10, addr + 0x80);
		if (addr2 > 0)
		{
			let result = FindInstr(_RPB_SubTest, addr, addr + 0x80);
			if (result !== false)
			{
				halfAddr = result.Addr;
				return true;
			}
		}
		return false;
	});

	if (halfAddr < 0)
		throw Error("Half Width subtraction missing");

	$$(_ + '2.1 - Get the new dimensions from user')
	let result = Exe.GetUserInput('$pcHPBarSize', D_VecI8, "Player HP Bar Dimensions", "Enter the new HP bar size for Player (in pixels)", [60, 9], {
		name0: "Bar Width", min0: 1,
		name1: "Bar Height", min1: 1,
	});
	if (result === false)
		Cancel("Size", "(60 x 9)");

	let [wid, hgt] = result;

	$$(_ + '2.2 - Replace at all the locations')
	if (wid !== 60)
	{
		Exe.SetInt8(sizeAddr + 3, wid);
		Exe.SetUint8(halfAddr + 2, wid >> 1);
	}

	if (hgt !== 9)
	{
		Exe.SetInt8(sizeAddr + 1, hgt);
	}

	return true;
};

///
/// \brief Testing function for finding the SUB reg32, 1E instruction
///
_RPB_SubTest = (ins) =>
	ins.Codes[0] === 0x83 && ins.Immd === 0x1E && ins.MRM.RegO === 5;


// TODO - No matching code found for clients before 2012-04-10RE . Looks like its using PUSH 5 & PUSH 3C again
//        Need to try in live client to find the correct one.

///
/// \brief Adds a function to test for Boss Monsters & change the HP Bar dimensions being PUSHed
///
ResizeBossBar = function()
{
	let _ = 'ResizeBossBar : ';

	let parts, type, tgtAddr;
	if (Exe.BuildDate < 20160000)
	{
		$$(_ + '1,1 - Find the weird calculation used for older clients with the size values')
		parts = [
			LEA(R32, [2, R32, R32])                         //lea regA, [regB*2 + regB]
		,
			LEA(R32, [Exe.Version < 11 ? R32 : 2, R32, 5])  //lea regA, [regA*2 + 5] OR lea regA, [regA + regA + 5]
		+	PUSH_R                                          //push regA
		+	LEA(R32, [4, R32, R32])                         //lea regA, [regB*4 + regB]
		+	(Exe.Version >= 11 ? MOV(ECX, R32) : "")        //mov ecx, regC ; only there in old clients
		,
			LEA(R32, [8, R32, 0x3C])                        //lea regA, [regA*8 + 3Ch]
		+	PUSH_R                                          //push regA
		]
		;
		type = 1;

		tgtAddr = Exe.FindHex(parts);
		if (tgtAddr < 0)
			throw Error("Size assignment missing");
	}
	else
	{
		$$(_ + '1.2 - Find the size PUSHes (multiple matches will be there)')
		parts = [
			PUSH(0x5)                //push 5
		+	PUSH(0x3C)               //push 3Ch
		,
			MOV(ECX, EAX)            //mov ecx, eax
		,
			MOV([R32, POS2WC], EAX)  //mov dword ptr [regC + dispC], eax
		+	CALL()                   //call func#1
		]
		;
		type = 2;

		let addrs = Exe.FindHexN(parts);
		if (addrs.isEmpty())
		{
			[parts[1], parts[0]] = [parts[0], parts[1]]; //swap the first 2 parts (MOV need to be before PUSHes)

			type = 3;
			addrs = Exe.FindHexN(parts);
		}
		if (addrs.isEmpty())
			throw Error("PUSH pattern missing");

		$$(_ + '1.3 - Filter out the correct PUSH based on code before it')
		tgtAddr = addrs.find(memAddr =>
		{
			let code2 =
				CMP(EBX, -1)			//cmp ebx, -1
			+	JE(POS2WC)				//je _skip
			+	MOV(ESI, [EBP, WCp])	//mov esi, dword ptr [ebp + disp8A] ; ARG.x
			+	CMP(ESI, -1)			//cmp esi, -1
			;
			let addr = Exe.FindHex(code2, memAddr - 0xA0, memAddr);
			if (addr < 0)
			{
				code2 = code2.replace(
					JE(POS2WC),				//change JE _skip
					                        //  TO
					JNE(WCp)				//jne short _skip#2
				+	CMP([EBP, NEG2WC], EBX)	//cmp dword ptr [LOCAL.x], ebx
				+	JE(WCp)					//je short _skip#3
				);

				addr = Exe.FindHex(code2, memAddr - 0xF0, memAddr);
			}
			return (addr > 0);
		});
		if (!tgtAddr)
			throw Error("No proper size PUSHes found");
	}

	$$(_ + '2.1 - Get the new dimensions from user')
	let result = Exe.GetUserInput('$mvpHPBarSize', D_VecI8, "MVP HP Bar Dimensions", "Enter the new HP bar size for MVP/Boss (in pixels)", [60, 5], {
		name0: "Bar Width", min0: 1,
		name1: "Bar Height", min1: 1,
	});
	if (result === false)
		Cancel("Size", "(60 x 5)");

	let [wid, hgt] = result;

	$$(_ + '2.2 - Based on type replace the values')
	if (type === 1)
	{
		let [,hgtAddr, widAddr] = MapAddrs(tgtAddr, parts);
		if (hgt !== 5)
			Exe.SetInt8(hgtAddr + 3, hgt);

		if (wid !== 60)
			Exe.SetInt8(widAddr + 3, wid);
	}
	else
	{
		if (type === 3)
			tgtAddr += 2;

		if (hgt !== 5)
			Exe.SetInt8(tgtAddr + 1, hgt);

		if (wid !== 60)
			Exe.SetInt8(tgtAddr + 3, wid);
	}

	return true;
};
