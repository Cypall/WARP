/**************************************************************************\
*                                                                          *
*   Copyright (C) 2020-2021 CH.C (jchcc), Neo-Mind                         *
*                                                                          *
*   This file is a part of WARP project (specific to RO clients)           *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : CH.C (jchcc), Neo-Mind                                 *
*   Created Date  : 2020-11-12                                             *
*   Last Modified : 2021-07-25                                             *
*                                                                          *
\**************************************************************************/

// TODO - Pattern for the newer clients is changed again. Need to experiment with live client

///
/// \brief Changes the dimensions being PUSHed for creating Player's HP/SP Bar
///
ResizePlayerBar = function()
{
	const _ = 'ResizePlayerBar : ';

	$$(_ + '1.1 - Find the original size PUSHes')
	let prefix =
		MOV(ECX, [R32, POS2WC])  //mov ecx, dword ptr [regA + dispA]
	+	PUSH(POS4WC)             //push immA
	+	PUSH(POS4WC)             //push immB
	+	CALL(ALLWC)              //call func#1
	+	MOV(ECX, [R32, POS2WC])  //mov ecx, dword ptr [regA + dispA]
	;

	const suffix =
		PUSH(9)                  //push 9
	+	PUSH(0x3C)               //push 3Ch
	;

	let addr = Exe.FindHex(prefix + suffix);
	if (addr < 0 && Exe.Version === 6) //VC6 2nd form
	{
		prefix =
			MOV([R32, POS1WC], R32) //mov dword ptr [regB + dispB], regC
		+	MOV(ECX, [R32, POS2WC]) //mov ecx, dword ptr [regA + dispC]
		;
		addr = Exe.FindHex(prefix + suffix);
	}
	if (addr < 0)
		throw Error("Size PUSHes missing");

	const sizeAddr = addr + prefix.byteCount();

	$$(_ + '1.2 - Find the reference assignment before the half width subtraction')
	let addrs = Exe.FindHexN( MOV([EAX, WCp], 0x32FF32) );    //mov dword ptr [eax + disp8D], 32FF32h
	if (addrs.isEmpty())
	{
		addrs = Exe.FindHexN( MOV([EAX, POS2WC], 0x32FF32) ); //mov dword ptr [eax + dispD], 32FF32h
	}
	if (addrs.length !== 2)
		throw Error("Invalid no of matches found");

	$$(_ + '1.3 - Now find the subtraction after it. The pattern changes a lot between 2008 - 2019 so this is the only foolproof way')
	const MovEAX = MOV(EAX, 0x88888889); //mov eax, 88888889h

	const halfAddr = addrs.findAs( memAddr =>
	{
		const addr = Exe.FindHex(MovEAX, memAddr + 10, memAddr + 0x80);
		if (addr > 0)
		{
			const result = FindInstr(_RPB_SubTest, memAddr, memAddr + 0x80);
			if (result)
				return result.Addr;
		}
	});
	if (!halfAddr)
		throw Error("Half Width subtraction missing");

	$$(_ + '2.1 - Get the new dimensions from user')
	const result = Exe.GetUserInput('$pcHPBarSize', D_VecI8, "Player HP Bar Dimensions", "Enter the new HP bar size for Player (in pixels)", [60, 9], {
		name0: "Bar Width", min0: 1,
		name1: "Bar Height", min1: 1,
	});
	if (result === false)
		Cancel("Size", "(60 x 9)");

	const [wid, hgt] = result;

	$$(_ + '2.2 - Replace at all the locations')
	if (wid !== 60)
	{
		Exe.SetInt8(sizeAddr + 3, wid);
		Exe.SetUint8(halfAddr + 2, wid >> 1);
	}

	if (hgt !== 9)
	{
		Exe.SetInt8(sizeAddr + 1, hgt);
	}

	return true;
};

///
/// \brief Testing function for finding the SUB reg32, 1E instruction
///
_RPB_SubTest = (ins) =>
	ins.Codes[0] === 0x83 && ins.Immd === 0x1E && ins.MRM.RegO === 5;


// TODO - No matching code found for clients before 2012-04-10RE . Looks like its using PUSH 5 & PUSH 3C again
//        Need to try in live client to find the correct one.

///
/// \brief Adds a function to test for Boss Monsters & change the HP Bar dimensions being PUSHed
///
ResizeBossBar = function()
{
	const _ = 'ResizeBossBar : ';

	let type, hookAddr, isBoss, ovrdSize, movECX;
	if (Exe.BuildDate < 20160000)
	{
		$$(_ + '1.1 - Find the weird calculation used for older clients with the size values')
		parts =
		[//0
			LEA(R32, [2, R32, R32])                         //lea regA, [regB*2 + regB]
		+	LEA(R32, [Exe.Version < 11 ? R32 : 2, R32, 5])  //lea regA, [regA*2 + 5] OR lea regA, [regA + regA + 5]
		+	PUSH_R                                          //push regA ; height
		+	LEA(R32, [4, R32, R32])                         //lea regA, [regB*4 + regB]

		,//1
			(Exe.Version >= 11 ? MOV(ECX, R32) : "")        //mov ecx, regC ; only there in old clients
		+	LEA(R32, [8, R32, 0x3C])                        //lea regA, [regA*8 + 3Ch]
		+	PUSH_R                                          //push regA ; width
		];
		type = 1;

		hookAddr = Exe.FindHex(parts);
		if (hookAddr < 0)
			throw Error("Size assignment missing");

		ovrdSize = parts.byteCount();

		$$(_ + '1.2 - Extract the register being used in the multiplication which contains the isBoss flag')
		const ins = Instr.FromAddr(hookAddr);
		isBoss = R32.List[ins.SIB.Base];

		$$(_ + '1.3 - Save the MOV ECX instruction if applicable')
		movECX = Exe.Version >= 11 ? Instr.FromAddr(hookAddr + parts.byteCount(0)) : '';
	}
	else
	{
		movECX = MOV(ECX, EAX);

		$$(_ + '1.4 - Find the size PUSHes (multiple matches will be there)')
		let parts =
		[//0
			PUSH(5)                  //push 5
		+	PUSH(60)                 //push 3Ch

		,//1
			movECX                   //mov ecx, eax

		,//2
			MOV([R32, POS2WC], EAX)  //mov dword ptr [regC + dispC], eax
		+	CALL()                   //call func#1
		];
		type = 2;

		let addrs = Exe.FindHexN(parts);
		if (addrs.isEmpty())
		{
			[parts[1], parts[0]] = [parts[0], parts[1]]; //swap the first 2 parts (MOV need to be before PUSHes)

			type = 3;
			addrs = Exe.FindHexN(parts);
		}
		if (addrs.isEmpty())
			throw Error("PUSH pattern missing");

		$$(_ + '1.5 - Filter out the correct PUSH based on code before it')
		hookAddr = addrs.find(memAddr =>
		{
			let code2 =
				CMP(EBX, -1)			//cmp ebx, -1
			+	JE(POS2WC)				//je _skip
			+	MOV(ESI, [EBP, WCp])	//mov esi, dword ptr [ebp + disp8A] ; ARG.x
			+	CMP(ESI, -1)			//cmp esi, -1
			;
			let addr = Exe.FindHex(code2, memAddr - 0xA0, memAddr);
			if (addr < 0)
			{
				code2 = code2.replace(
					JE(POS2WC),				//change JE _skip
					                        //  TO
					JNE(WCp)				//jne short _skip#2
				+	CMP([EBP, NEG2WC], EBX)	//cmp dword ptr [LOCAL.x], ebx
				+	JE(WCp)					//je short _skip#3
				);

				addr = Exe.FindHex(code2, memAddr - 0xF0, memAddr);
			}
			return (addr > 0);
		});
		if (!hookAddr)
			throw Error("No proper size PUSHes found");

		ovrdSize = 6; //2 for each PUSH + 2 for MOV

		$$(_ + '1.6 - Extract the memory location & update the displacement to isBoss flag')
		const ins = Instr.FromAddr(hookAddr + parts.byteCount(0, 1));
		isBoss = [R32.List[ins.MRM.RegM], ins.Disp + 4];
	}

	$$(_ + '2.1 - Get the new dimensions from user')
	const result = Exe.GetUserInput('$mvpHPBarSize', D_VecI8, "MVP HP Bar Dimensions", "Enter the new HP bar size for MVP/Boss (in pixels)", [60, 5], {
		name0: "Bar Width", min0: 1,
		name1: "Bar Height", min1: 1,
	});
	if (result === false)
		Cancel("Size", "(60 x 5)");

	const [wid, hgt] = result;

	$$(_ + '2.2 - Construct new code to test for boss and push the dimensions')
	parts =
	[//0
		(type == 1
	?
		CMP(isBoss, 1)           //cmp regC, 1
	:
		CMP(BYTE_PTR, isBoss, 1) //cmp byte ptr [regC + bossLoc], 1
	)
	+	JNE(Filler(1,1))         //jne short _nonBoss
	+	PUSH(hgt)                //push <hgt>
	+	PUSH(wid)                //push <wid>
	+	movECX                   //mov ecx, regA
	+	JMP(Filler(2))           //jmp <retnAddr>

	,//1
		PUSH(5)                  //push 5
	+	PUSH(60)                 //push 3Ch
	+	movECX                   //mov ecx, regA
	+	JMP(Filler(2))           //jmp <retnAddr>
	];

	$$(_ + '2.3 - Allocate space for it')
	const [free, freeVir] = Exe.FindSpace(parts.byteCount(), 0x10);

	$$(_ + '2.4 - Fill in the blanks')
	const code = SetFillTargets( parts,
	{
		start : freeVir,
		'1,1' : freeVir + parts.byteCount(0), //_nonBoss
		    2 : Exe.Phy2Vir(hookAddr + ovrdSize, CODE)
	});

	$$(_ + '2.5 - Add at allocated space')
	Exe.AddHex(free, code);

	$$(_ + '2.6 - Setup a JMP to it at hookAddr')
	Exe.SetJMP(hookAddr, freeVir, ovrdSize - 5); //NOPs at the end to keep it clean.

	return true;
};
