/**************************************************************************\
*                                                                          *
*   Copyright (C) 2013-2021 Ai4rei/AN                                      *
*   Copyright (C) 2013-2021 Neo-Mind                                       *
*                                                                          *
*   This file is a part of WARP project (specific to RO clients)           *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : Ai4rei/AN, Neo-Mind                                    *
*   Created Date  : 2021-02-24                                             *
*   Last Modified : 2021-07-31                                             *
*                                                                          *
\**************************************************************************/

///
/// \brief Makes the respective sprites & palettes use the acutal numbers instead of the hard-coded tables.
///
IncrHairs = function(patchName)
{
	_IH_Stage1(patchName); //for the head sprites & palettes
	if (Exe.Version > 6)
		_IH_Stage2(patchName); //for the mid-headgear sprites dependent on hairstyles.

	return true;
};

///
/// \brief Ignores the hard-coded hair style table and generate hair style IDs ad-hoc instead
///
_IH_Stage1 = patchName =>
{
	const _ = patchName + ' (Stage 1) : ';

	$$(_ + '1.1 - Find the format strings using a common part')
	const addrs = Exe.FindTextN("\\\xB8\xD3\xB8\xAE\xC5\xEB\\%s\\%s", PHYSICAL, false, false);
	if (addrs.isEmpty())
		throw Error("Format string(s) missing");

	$$(_ + '1.2 - Extract the string addresses')
	const strAddrs = addrs.map(addr => (Exe.GetUint8(addr - 1) > 0 ? addr - 6 : addr));

	$$(_ + '1.3 - Detect newer clients with Doram')
	const doramOn = addrs[0] == strAddrs[0];

	$$(_ + '1.4 - Find the format string for the palette (unless shared head palette is ON)')
	let addr = -1;
	const fmtPrefix = "\xB8\xD3\xB8\xAE\\\xB8\xD3\xB8\xAE";
	if (Exe.Version <= 9) //VC6 & VC9
		addr = Exe.FindText(fmtPrefix + "%s%s_%d.pal", PHYSICAL); //Old style used for VC6 and some initial VC9 clients

	if (addr < 0)
		addr = Exe.FindText(fmtPrefix + "%s_%s_%d.pal", PHYSICAL); //New style

	if (addr < 0)
		throw Error("Palette format string missing");

	$$(_ + '1.5 - Add to the strAddrs')
	strAddrs.push(addr);

	$$(_ + '1.6 - Get the limit from user or set it to 65k based on the patch')
	const isPalShared = Warp.GetPatchState("HeadPalMF") || Warp.GetPatchState("HeadPalUnisex");
	if (patchName === "IncrHairStyles")
	{
		IH_Max = Exe.GetUserInput('$maxHairs', D_Uint16, "Limit input", "Enter the maximum no of hairstyles", 100, {saveDefault: true});
		if (IH_Max === false)
			Cancel("Limit reverted to default");
	}
	else if (patchName === "Allow65kHairs")
	{
		IH_Max = 65535;
	}

	$$(_ + '2 - Prep the lambda function for fixing comparisons')
	const fixCmp = (addr) =>
	{
		if (IH_Max === 65535)
		{
			$$(_ + '2.1 - For highest limit just enforce the conditional jump after the CMP')
			Exe.SetJMP(addr + 3);
		}

		else if (IH_Max <= 0x7F)
		{
			$$(_ + '2.2 - For 1 byte limits directly alter the limit value used')
			Exe.SetInt16(addr + 2, IH_Max | 0x7C00); //7C to make it JLE in case it isnt.
		}

		else
		{
			$$(_ + '2.3 - For multi byte limits, extract the register used')
			const reg = R32.List[Exe.GetUint8(addr + 1) & 0x7];

			$$(_ + '2.4 - Prep code to compare')
			code =
				CMP(reg, IH_Max) //cmp reg, <maxHairs>
			+	JA(Filler(1))    //ja <defAddr>
			+	JMP(Filler(2))   //jmp <validAddr>
			;

			$$(_ + '2.5 - Find space for the code')
			const [free, freeVir] = Exe.FindSpace(code.byteCount());

			$$(_ + '2.6 - Fill in the blanks')
			code = SetFillTargets( code,
			{
				start : freeVir,
				    1 : Exe.Phy2Vir(addr + 5, CODE),
				    2 : Exe.GetTgtAddr(addr + 4, 1)
			});

			$$(_ + '2.7 - Add to allocated space')
			Exe.AddHex(free, code);

			$$(_ + '2.8 - Setup a JMP to the allocated space')
			Exe.SetJMP(addr, freeVir);
		}

		$$(_ + '2.9 - Change the default value to 2 instead of 0D or 6')
		let ins = Instr.FromAddr(addr + 5);
		ins.Immd = 2;
		Exe.SetHex(ins.Addr, ins);
	};

	$$(_ + '3 - Prep the lambda function for table fixes')
	const fixTbl = (addr) =>
	{
		$$(_ + '3.1 - Extract the instruction')
		let ins = Instr.FromAddr(addr);

		$$(_ + '3.2 - Update the ModRM to not use the 4*reg part')
		ins.MRM.update(null, null, ins.SIB.Base);

		$$(_ + '3.3 - Change the SIB to 90h (quick hack to set a NOP at end)')
		ins.SIB.Data = 0x90;

		$$(_ + '3.4 - Replace the instruction')
		Exe.SetHex(ins.Addr, ins);
	};

	strAddrs.forEach( (memAddr, idx) =>
	{
		const __ = `${_} [${idx}] `;

		const isLast = idx === strAddrs.length-1;

		if (!isLast || !isPalShared)
		{
			$$(__ + '4.1 - Retrieve the string & get the position of the 2nd %s')
			const fmt = Exe.GetText(memAddr);
			const pos = fmt.indexOf("%s", isLast ? 0 : fmt.indexOf("%s") + 1);

			$$(__ + '4.2 - Change the %s to %u')
			Exe.SetInt8(memAddr + pos + 1, 0x75);
		}

		$$(__ + '4.3 - Find where the string is used in a PUSH')
		const strVir = Exe.Phy2Vir(memAddr);
		const hookAddr = Exe.FindHex(PUSH(strVir));
		if (hookAddr < 0)
			throw Error("Format string not used");

		$$(__ + '4.4 - Retrieve the stack register')
		const sreg = ROC.StkReg; //EBP or ESP depending on FP

		$$(__ + '4.5 - Find the start of the function')
		let code, addr = -1, type; //type is used to find the stack offset later
		if (Exe.BuildDate < 20111000)
		{
			code = '';
			if (ROC.HasFP)
			{
				code +=
					FP_START               //push ebp
					                       //mov ebp, esp
				;
			}
			else
			{
				code +=
					isLast
				?	INT3                   //int3
					                       // OR
				:	PUSH_R                 //push regA
				;
			}

			code +=
				MOV(R32, [sreg, ' 0?']) //mov regA, dword ptr [ARG.2] or [ARG.1]
			;

			addr = Exe.FindLastHex(code, hookAddr, hookAddr - 0x200);
			type = 1;
		}
		if (addr < 0)
		{
			code =
				PUSH(-1)                //push -1
			+	PUSH(POS3WC)            //push offset#1
			+	MOV(EAX, FS, [0])       //mov eax, dword ptr fs:[0]
			+	PUSH_EAX                //push eax
			;

			addr = Exe.FindLastHex(code, hookAddr, hookAddr - 0x400);
			type = 2;
		}
		if (addr < 0)
			throw Error("Function start missing");

		$$(__ + '4.6 - Save the address after the code')
		const beginAddr = addr + code.byteCount();

		$$(__ + '4.7 - Find the limiting comparison for hairstyle')
		const prefix =
			" [01111.00] 05" //jl/js short _skip#1
		+	CMP(R32, WCp)    //cmp regA, <limit>
		;

		const suffix =
			" [011111.0] 0?" //jl/jle short _skip#2

		addr = Exe.FindHex(prefix + suffix, beginAddr, beginAddr + 0x50);
		if (addr < 0 && doramOn)
		{
			addr = Exe.FindHex(prefix + suffix, beginAddr + 0x100, beginAddr + 0x200);
		}
		if (addr < 0 && !isLast)
			throw Error("Limit checker missing");

		$$(__ + '4.8 - Fix the CMP')
		fixCmp(addr + 2);

		$$(__ + '4.9 - Repeat when doram specific section is present (only for the spr & act)')
		if (idx === 0 && doramOn)
		{
			addr = Exe.FindHex(prefix + suffix, addr + 5, addr + 0xB0);
			if (addr > 0)
				fixCmp(addr + 2);
		}

		$$(__ + '4.10 - Find the table assignments (MOV or LEA regA, [regB*4 + regC])')
		const isLEA = !isLast && strAddrs.length == 3 && Exe.BuildDate > 20110922;
		code = isLEA
			? LEA(R32, [4, R32, R32])
			: MOV(R32, [4, R32, R32])
			;

		$$(__ + '4.11 - Filter out the false matches')
		const addrs = Exe.FindHexN(code, beginAddr, hookAddr).filter(addr =>
		{
			const ins = Instr.FromAddr(addr);
			if (ins.BC_Disp > 0)
				return false;

			if (isLEA || strAddrs.length < 3)
				return true;

			const ins2 = ins.getNext();
			const ins3 = ins2.getNext();

			if (!isLast && ins2.Codes[0] === 0x52 && ins3.Codes[0] === 0x8B && ins3.SIB != undefined && ins3.SIB.Scale === 2) //PUSH EDX followed by MOV r32, [r32*4 + r32]
				return true;

			if (ins2.Codes[0] === 0x8B && ins2.BC_Disp > 0) //MOV regA, [regB + offset] followed by
			{
				if (ins3.Codes[0] === 0x52) //push edx
					return true;

				if (ins3.Codes[0] === 0x8B && ins3.BC_Disp === 1 && ins3.SIB == undefined) //or mov rega, [regb + disp8] where regB is not esp
					return true;
			}

			if (ins2.Codes[0] >= 0x50 && ins2.Codes[0] <= 0x57 && ins3.Codes[0] === 0x68) //push eax
				return true;                                                              //push offset <formatStr>

			return false;
		});

		if (addrs.isEmpty())
			throw Error("Table fetchers not found");

		$$(__ + '4.12 - Fix the tables')
		addrs.forEach( fixTbl );

		if (!isLast || !isPalShared)
		{
			$$(__ + '5.1 - Calculate the base stack offset for retrieving the argument')
			let offset;
			if (ROC.HasFP)
			{
				offset = 4; //for the 'push ebp'
			}
			else if (type === 1) //Older VC9 function signature
			{
				offset = 4 * 4; //there are 4 PUSHes in total. We could calculate it but seems like a waste.
			}
			else //Newer VC9 function signature
			{
				offset = 4 * 3; //for push -1, push offset#2 and push eax
				offset += Exe.GetInt8(beginAddr + 2); //from sub esp, immA

				code =
					PUSH_R.repeat(3)   //push regA
					                   //push regB
					                   //push regC
				+	MOV(EAX, [POS3WC]) //mov eax, dword ptr [offset#3]
				+	XOR(EAX, ESP)      //xor eax, esp
				+	PUSH_EAX           //push eax
				;
				addr = Exe.FindHex(code, beginAddr + 3, beginAddr + 0x20);
				if (addr < 0)
					throw Error("Register PUSHes missing");

				offset += 4 * 4; //4 PUSHes from that

				code = Exe.GetUint8(addr - 1);
				if (code >= 0x50 && code <= 0x57) //if additional PUSH reg is there before it
					offset += 4;

				if (Exe.BuildDate > 20111105)
				{
					addr = Exe.FindLastHex(PUSH_R.repeat(3) + LEA(R32, [sreg, WCp]), hookAddr, hookAddr - 0x20); //push reg *3 and lea regA, [sreg + disp8]
					if (addr < 0)
						throw Error("Final Reg PUSHes missing");

					offset += 4 * 3; //3 PUSHes from that

					code = Exe.GetUint8(addr - 1);
					if (code >= 0x50 && code <= 0x57) //if additional PUSH reg is there before it
						offset += 4;
				}
				else
				{
					offset += 4 * 3; //It's always 3 arguments going into the function before the format
				}
			}

			$$(__ + '5.2 - Construct the function argument required (which contains the hairstyle number or a pointer to it - in the case of spr/act)')
			const arg = Exe.BuildDate < 20111108
				?  [sreg, offset + 4 * (isLast ? 1 : 2)]
				:  [sreg, offset + 4 * (isLast ? 2 : 5)]
				;

			offset = isLast ? 4 : 8;

			$$(__ + '5.3 - Prep the hook code')
			code =
				PUSH_EAX          //push eax
			+	ADD(ESP, offset)  //add esp, 4/8
			+	MOV(EAX, arg)     //mov eax, dword ptr [ARG.5/ARG.2 or ARG.2/ARG.1] ; latter for palette
			+	(!isLast
			?
				MOV(EAX, [EAX])   //mov eax, dword ptr [eax]
			:
				''
			)
			+	MOV([ESP], EAX)   //mov dword ptr [esp], eax
			+	SUB(ESP, offset)  //sub esp, 4/8
			+	POP_EAX           //pop eax
			+	PUSH(strVir)      //push offset <format string>
			+	JMP(Filler(1))    //jmp <retnAddr> ; Return Address is after the PUSH
			;

			$$(__ + '5.4 - Allocate space for it')
			const [free, freeVir] = Exe.FindSpace(code.byteCount(), 0x10);

			$$(__ + '5.5 - Fill in the blanks')
			code = SetFillTargets( code, 1,
			{
				start : freeVir,
				    1 : Exe.Phy2Vir(hookAddr + 5, CODE)
			});

			$$(__ + '5.6 - Add at allocated space')
			Exe.AddHex(free, code);

			$$(__ + '5.7 - Create a JMP to our code')
			Exe.SetJMP(hookAddr, freeVir);

			if (isLast && doramOn)
			{
				$$(__ + '6.1 - For doram palettes find the seperate format string')
				const newStrAddr = Exe.FindText("%s\\" + fmtPrefix + "%s_%s_%d.pal", PHYSICAL);

				if (newStrAddr > 0)
				{
					$$(__ + '6.2 - Change the second %s to %u')
					Exe.SetInt8(newStrAddr + 4 + fmtPrefix.length, 0x75);

					$$(__ + '6.3 - Find where it is PUSHed before the original format string PUSH')
					const newStrPush = PUSH(Exe.Phy2Vir(newStrAddr));
					const newHookAddr = Exe.FindLastHex(newStrPush, hookAddr, beginAddr);
					if (newHookAddr < 0)
						throw Error("Second palette format string not PUSHed");

					$$(__ + '6.4 - Prep the hook code for doram palette')
					let code =
						PUSH_EAX          //push eax
					+	ADD(ESP, 8)       //add esp, 8
					+	MOV(EAX, arg)     //mov eax, dword ptr [ARG.2/ARG.1]
					+	MOV([ESP], EAX)   //mov dword ptr [esp], eax
					+	SUB(ESP, 8)       //sub esp , 8
					+	POP_EAX           //pop eax
					+	newStrPush        //push offset "%s\<fmtPrefix>\%s_%s_%d.pal";
					+	JMP(Filler(1))    //jmp <newRetnAddr> ; after the original PUSH i.e. newHookAddr + 5
					;

					$$(__ + '6.5 - Allocate space for it')
					const [free, freeVir] = Exe.FindSpace(code.byteCount(), 0x10);

					$$(__ + '6.6 - Fiil in the blanks')
					code = SetFillTargets( code, 1,
					{
						start : freeVir,
						    1 : Exe.Phy2Vir(newHookAddr + 5, CODE)
					});

					$$(__ + '6.7 - Add at allocated space')
					Exe.AddHex(free, code);

					$$(__ + '6.8 - Create JMP to our code')
					Exe.SetJMP(newHookAddr, freeVir);
				}
			}
		}
	});
};

///
/// \brief Makes the mid-headgears that depend on the hair styles use idx 1 when going over the max known value.
///
Warp.Define("_IH_Stage2",
	
+	
+	
+	
+	
+	" 32 10 35 0F 65 46 F5 89 75 29 65 D4 1D 1C 06 F1 28 EE 44 08 CF 54 B9 92 7A 5B A5 92 24 37 20 EC F0 97 D7 8F 09 8E C7 D3 F4 39 5C 32 E4 48 2E AF 99 14 AA B3 81 9D 54 A2 8B D5 DA 65 97 8B 58 5F DF A6 BD A9 B7 BF 0C ED 7F DC B5 F7 41 AA 79 8B A1 FD 1A 87 71 94 75 34 11 FE 3C C7 05 0B 1A 0C F9 DE DD 36 D7 7D E6 53 D7 B6 A7 B8 24 73 99 21 3C AC 59 78 B6 C6 85 62 0C B1 D0 E6 38 BF 22 78 F0 C6 01 41 46 3D 63 CA A7 DA 64 97 1A 9C 5F 80 4D 10 46 E7 94 DC 00 E3 65 B1 CB BD DF 7E E2 D1 A0 1A CF 33 1E C8 74 D4 5D 7E 28 7B 90 06 F9 16 6F 46 3F 76 C0 9D 62 62 D5 C3 91 2E EA 0D 9A C6 17 2A 8E 37 C3 F2 E1 77 F3 B4 CB 34 C8 18 88 E5 53 A1 BF 83 89 B6 27 FB 07 96 5C EE EA C0 3B 31 88 2B D2 27 9A D9 6E 67 D1 A2 E2 22 6C 0D 0D 7E 47 1F 4A 85 05 9D 8C 73 1E E6 06 6A DB 85 73 80 D9 A0 DB 23 23 83 27 66 25 7C 3C 61 CD 73 57 79 69 5B 76 DA A9 13 D5 8D 1E 4C 9D 8F 47 E7 FF 60 ED E6 D9 CD 9E 53 BC 44 10 00 CF CA 09 36 B8 24 3F 68 BC 8E 4C 3A 99 D1 D0 26 54 67 2A BA 30 84 C7 89 34 1F 3D 83 11 94 98 C8 C0 98 86 63 96 FC 8A 89 24 69 4A BF 81 DE A8 B3 86 2C 69 C9 A6 60 C2 A6 66 45 BC C5 14 47 7A AF AF 78 DB BD 18 E3 93 85 A6 75 5A F6 39 2E 8B CF CF 24 3C 81 19 B0 D3 59 EC 11 56 3B 5D 28 0E C5 09 30 C4 90 40 73 10 D1 1F 5D 2E BD 79 95 D9 EA 4F 41 05 E0 C0 E9 42 8F D5 54 03 CE C7 B0 43 9E 8F 31 11 57 B4 A0 55 49 1A 4A E5 59 4E 2A 70 74 33 BF CF 96 E6 1C 62 CA 05 BD 85 7F 3B 55 47 95 23 20 40 54 11 79 73 9D DF CC 2B 35 14 5C FE 39 84 0A E9 65 84 36 F8 99 3B B7 27 C2 2B 9F 94 DB 10 76 BB D5 79 DA 21 6C 20 D3 13 68 6C 27 60 99 DC 10 4F EA 59 20 15 A6 37 6B"
+	" EE 78 A4 28 44 04 00 00 94 BF D7 BC D5 9B 47 6C D5 4D 9A DD 5F BA 46 C6 2A DC C9 5F D7 AD 84 6F 36 A0 54 68 E6 B8 BE CD 3C FD 4E 8E 26 E0 E1 D4 AE 0C 07 B1 D3 F3 A3 EF A8 6D C7 82 F5 CD 0C 86 73 9B 41 F1 58 AE 2E 1A CB 8E 4C BF 0F 91 E0 02 3B 6C F2 49 DD FD 00 D8 04 FD C4 6F BB EA 47 7F 08 C2 C7 06 03 CF F9 44 BA 7A B2 77 DE BC ED 41 32 C2 58 55 A0 E0 02 DA F4 97 1C 23 89 50 01 CC F9 75 28 2E A7 70 76 99 0B 23 BE E3 E9 73 A5 D6 5E E6 85 CA 27 79 F7 76 BF 30 69 AF 8E 3E 38 FE 06 67 E8 C2 EE C0 02 EA 0C 21 5D 02 9D AC 4E DF F5 0D 13 D9 96 F1 09 DC A9 B0 DF 3F 59 45 DC D9 6D 97 F8 9B 52 E9 FF 04 AC 0E 15 13 09 3F 1E E5 5F 9D 4D DA AF 62 9D 82 60 56 21 0A 20 50 BB 3F 94 20 DA 9A 46 03 E0 6C 16 C9 01 98 09 DE 91 17 40 05 1A 2C 17 38 6C 12 34 02 E8 11 AD EE ED 10 FB 80 7E 18 80 21 6F FE 25 14 B7 46 0E 66 94 A5 42 D9 02 E9 02 A3 35 50 A8 55 94 F3 62 11 A1 55 74 10 39 E5 86 C0 A9 20 04 F2 AC 70 99 F8 50 CF 94 E4 7B 05 78 C1 C9 57 7D 81 67 FC D0 E4 D2 67 BA 3D 6A 64 CE 77 B3 BE A4 FF 5A 64 53 8F B4 3C 6A DE 02 82 F3 19 CC 5F 9E 3C E2 68 EB 2F BF E2 25 26 61 3C 39 1E 06 2B BD 98 E1 B2 18 0A 9A 12 9C 18 B5 55 21 EB AF E1 D0 4A 43 BE E8 82 00 C6 24 C8 2F 14 8F B8 F7 E1 5C 3B A0 A0 DF A1 2D 07 7F FF 6B 34 EF DF 08 1B 51 E9 8B A5 91 34 61 5D D9 7E 2C 6D 5C 2D 17 E1 36 47 62 59 F2 E5 B5 D6 7A AD 1F A0 65 EF 06 A8 B0 ED 99 68 7F 05 0C 51 2E 5F 69 97 F9 8B DD B3 C3 E9 DB 50 BE DD 0A DD 0C 65 91 C1 CD 4C 71 B7 73 D7 DB D7 F4 D2 E0 A4 EC 63 D0 B1 4A E6 0A 37 F6 84 2D 9F 9A D8 E9 35 C6 C7 79 14 F0 C9 C9 6D 13 99 F0 F5 09 B0 5B A1 3F CF BC ED"
+	
);

///
/// \brief Wrappers for individual patches
///
Allow65kHairs = IncrHairs;
IncrHairStyles = IncrHairs;
