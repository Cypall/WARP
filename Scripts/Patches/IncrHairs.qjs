/**************************************************************************\
*                                                                          *
*   Copyright (C) 2013-2021 Ai4rei/AN                                      *
*   Copyright (C) 2013-2021 Neo-Mind                                       *
*                                                                          *
*   This file is a part of WARP project (specific to RO clients)           *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : Ai4rei/AN, Neo-Mind                                    *
*   Created Date  : 2021-02-24                                             *
*   Last Modified : 2021-10-23                                             *
*                                                                          *
\**************************************************************************/

///
/// \brief Makes the respective sprites & palettes use the acutal numbers instead of the hard-coded tables.
///
IncrHairs = function(patchName)
{
	this.stage1(patchName); //for the head sprites & palettes
	if (Exe.Version > 6)
		this.stage2(patchName); //for the mid-headgear sprites dependent on hairstyles.

	return true;
};

///
/// \brief Ignores the hard-coded hair style table and generate hair style IDs ad-hoc instead
///
IncrHairs.stage1 = patchName =>
{
	const _ = patchName + ' (Stage 1) : ';

	$$(_ + '1.1 - Find the format strings using a common part')
	const addrs = Exe.FindTextN("\\\xB8\xD3\xB8\xAE\xC5\xEB\\%s\\%s", PHYSICAL, false, false);
	if (addrs.isEmpty())
		throw Error("Format string(s) missing");

	$$(_ + '1.2 - Extract the string addresses')
	const strAddrs = addrs.map(addr => (Exe.GetUint8(addr - 1) > 0 ? addr - 6 : addr));

	$$(_ + '1.3 - Detect newer clients with Doram')
	const doramOn = addrs[0] == strAddrs[0];

	$$(_ + '1.4 - Find the format string for the palette (unless shared head palette is ON)')
	let addr = -1;
	const fmtPrefix = "\xB8\xD3\xB8\xAE\\\xB8\xD3\xB8\xAE";
	if (Exe.Version <= 9) //VC6 & VC9
		addr = Exe.FindText(fmtPrefix + "%s%s_%d.pal", PHYSICAL); //Old style used for VC6 and some initial VC9 clients

	if (addr < 0)
		addr = Exe.FindText(fmtPrefix + "%s_%s_%d.pal", PHYSICAL); //New style

	if (addr < 0)
		throw Error("Palette format string missing");

	$$(_ + '1.5 - Add to the strAddrs')
	strAddrs.push(addr);

	$$(_ + '1.6 - Get the limit from user or set it to 65k based on the patch')
	const isPalShared = Warp.GetPatchState("HeadPalMF") || Warp.GetPatchState("HeadPalUnisex");
	if (patchName === "IncrHairStyles")
	{
		IH_Max = Exe.GetUserInput('$maxHairs', D_Uint16, "Limit input", "Enter the maximum no of hairstyles", 100, {saveDefault: true});
		if (IH_Max === false)
			Cancel("Limit reverted to default");
		
		IH_Max = parseInt(IH_Max); //temporary fix for strings
	}
	else if (patchName === "Allow65kHairs")
	{
		IH_Max = 65535;
	}

	$$(_ + '2 - Prep the lambda function for fixing comparisons')
	const fixCmp = (addr) =>
	{
		if (IH_Max === 65535)
		{
			$$(_ + '2.1 - For highest limit just enforce the conditional jump after the CMP')
			Exe.SetJMP(addr + 3);
		}

		else if (IH_Max <= 0x7F)
		{
			$$(_ + '2.2 - For 1 byte limits directly alter the limit value used')
			Exe.SetInt16(addr + 2, IH_Max | 0x7C00); //7C to make it JLE in case it isnt.
		}

		else
		{
			$$(_ + '2.3 - For multi byte limits, extract the register used')
			const reg = R32.List[Exe.GetUint8(addr + 1) & 0x7];

			$$(_ + '2.4 - Construct the code for comparison')
			code =
				CMP(reg, IH_Max) //cmp reg, <maxHairs>
			+	JA(Filler(1))    //ja <defAddr>
			+	JMP(Filler(2))   //jmp <validAddr>
			;

			$$(_ + '2.5 - Prepare the arguments for auto-hook')
			const args =
			{
				snap : 1,
				targets : {
					1 : Exe.Phy2Vir(addr + 5, CODE),
				    2 : Exe.GetTgtAddr(addr + 4, 1)
				}
			};

			$$(_ + '2.6 - Add our code and jump to it from addr')
			AutoHook(addr, code, args);
		}

		$$(_ + '2.9 - Change the default value to 2 instead of 0D or 6')
		let ins = Instr.FromAddr(addr + 5);
		ins.Immd = 2;
		Exe.SetHex(ins.Addr, ins);
	};

	$$(_ + '3 - Prep the lambda function for table fixes')
	const fixTbl = (addr) =>
	{
		$$(_ + '3.1 - Extract the instruction')
		let ins = Instr.FromAddr(addr);

		$$(_ + '3.2 - Update the ModRM to not use the 4*reg part')
		ins.MRM.update(null, null, ins.SIB.Base);

		$$(_ + '3.3 - Change the SIB to 90h (quick hack to set a NOP at end)')
		ins.SIB.Data = 0x90;

		$$(_ + '3.4 - Replace the instruction')
		Exe.SetHex(ins.Addr, ins);
	};

	strAddrs.forEach( (memAddr, idx) =>
	{
		const __ = `${_} [${idx}] `;

		const isLast = idx === strAddrs.length-1;

		if (!isLast || !isPalShared)
		{
			$$(__ + '4.1 - Retrieve the string & get the position of the 2nd %s')
			const fmt = Exe.GetText(memAddr);
			const pos = fmt.indexOf("%s", isLast ? 0 : fmt.indexOf("%s") + 1);

			$$(__ + '4.2 - Change the %s to %u')
			Exe.SetInt8(memAddr + pos + 1, 0x75);
		}

		$$(__ + '4.3 - Find where the string is used in a PUSH')
		const strVir = Exe.Phy2Vir(memAddr);
		const hookAddr = Exe.FindHex(PUSH(strVir));
		if (hookAddr < 0)
			throw Error("Format string not used");

		$$(__ + '4.4 - Retrieve the stack register')
		const sreg = ROC.StkReg; //EBP or ESP depending on FP

		$$(__ + '4.5 - Find the start of the function')
		let code, addr = -1, type; //type is used to find the stack offset later
		if (Exe.BuildDate < 20111000)
		{
			code = '';
			if (ROC.HasFP)
			{
				code +=
					FP_START               //push ebp
					                       //mov ebp, esp
				;
			}
			else
			{
				code +=
					isLast
				?	INT3                   //int3
					                       // OR
				:	PUSH_R                 //push regA
				;
			}

			code +=
				MOV(R32, [sreg, ' 0?']) //mov regA, dword ptr [ARG.2] or [ARG.1]
			;

			addr = Exe.FindLastHex(code, hookAddr, hookAddr - 0x200);
			type = 1;
		}
		if (addr < 0)
		{
			code =
				PUSH(-1)                //push -1
			+	PUSH(POS3WC)            //push offset#1
			+	MOV(EAX, FS, [0])       //mov eax, dword ptr fs:[0]
			+	PUSH_EAX                //push eax
			;

			addr = Exe.FindLastHex(code, hookAddr, hookAddr - 0x400);
			type = 2;
		}
		if (addr < 0)
			throw Error("Function start missing");

		$$(__ + '4.6 - Save the address after the code')
		const beginAddr = addr + code.byteCount();

		$$(__ + '4.7 - Find the limiting comparison for hairstyle')
		const prefix =
			" [01111.00] 05" //jl/js short _skip#1
		+	CMP(R32, WCp)    //cmp regA, <limit>
		;

		const suffix =
			" [011111.0] 0?" //jl/jle short _skip#2

		addr = Exe.FindHex(prefix + suffix, beginAddr, beginAddr + 0x50);
		if (addr < 0 && doramOn)
		{
			addr = Exe.FindHex(prefix + suffix, beginAddr + 0x100, beginAddr + 0x200);
		}
		if (addr < 0 && !isLast)
			throw Error("Limit checker missing");

		$$(__ + '4.8 - Fix the CMP')
		fixCmp(addr + 2);

		$$(__ + '4.9 - Repeat when doram specific section is present (only for the spr & act)')
		if (idx === 0 && doramOn)
		{
			addr = Exe.FindHex(prefix + suffix, addr + 5, addr + 0xB0);
			if (addr > 0)
				fixCmp(addr + 2);
		}

		$$(__ + '4.10 - Find the table assignments (MOV or LEA regA, [regB*4 + regC])')
		const isLEA = !isLast && strAddrs.length == 3 && Exe.BuildDate > 20110922;
		code = isLEA
			? LEA(R32, [4, R32, R32])
			: MOV(R32, [4, R32, R32])
			;

		$$(__ + '4.11 - Filter out the false matches')
		const addrs = Exe.FindHexN(code, beginAddr, hookAddr).filter(addr =>
		{
			const ins = Instr.FromAddr(addr);
			if (ins.BC_Disp > 0)
				return false;

			if (isLEA || strAddrs.length < 3)
				return true;

			const ins2 = ins.getNext();
			const ins3 = ins2.getNext();

			if (!isLast && ins2.Codes[0] === 0x52 && ins3.Codes[0] === 0x8B && ins3.SIB != undefined && ins3.SIB.Scale === 2) //PUSH EDX followed by MOV r32, [r32*4 + r32]
				return true;

			if (ins2.Codes[0] === 0x8B && ins2.BC_Disp > 0) //MOV regA, [regB + offset] followed by
			{
				if (ins3.Codes[0] === 0x52) //push edx
					return true;

				if (ins3.Codes[0] === 0x8B && ins3.BC_Disp === 1 && ins3.SIB == undefined) //or mov rega, [regb + disp8] where regB is not esp
					return true;
			}

			if (ins2.Codes[0] >= 0x50 && ins2.Codes[0] <= 0x57 && ins3.Codes[0] === 0x68) //push eax
				return true;                                                              //push offset <formatStr>

			return false;
		});

		if (addrs.isEmpty())
			throw Error("Table fetchers not found");

		$$(__ + '4.12 - Fix the tables')
		addrs.forEach( fixTbl );

		if (!isLast || !isPalShared)
		{
			$$(__ + '5.1 - Calculate the base stack offset for retrieving the argument')
			let offset;
			if (ROC.HasFP)
			{
				offset = 4; //for the 'push ebp'
			}
			else if (type === 1) //Older VC9 function signature
			{
				offset = 4 * 4; //there are 4 PUSHes in total. We could calculate it but seems like a waste.
			}
			else //Newer VC9 function signature
			{
				offset = 4 * 3; //for push -1, push offset#2 and push eax
				offset += Exe.GetInt8(beginAddr + 2); //from sub esp, immA

				code =
					PUSH_R.repeat(3)   //push regA
					                   //push regB
					                   //push regC
				+	MOV(EAX, [POS3WC]) //mov eax, dword ptr [offset#3]
				+	XOR(EAX, ESP)      //xor eax, esp
				+	PUSH_EAX           //push eax
				;
				addr = Exe.FindHex(code, beginAddr + 3, beginAddr + 0x20);
				if (addr < 0)
					throw Error("Register PUSHes missing");

				offset += 4 * 4; //4 PUSHes from that

				code = Exe.GetUint8(addr - 1);
				if (code >= 0x50 && code <= 0x57) //if additional PUSH reg is there before it
					offset += 4;

				if (Exe.BuildDate > 20111105)
				{
					addr = Exe.FindLastHex(PUSH_R.repeat(3) + LEA(R32, [sreg, WCp]), hookAddr, hookAddr - 0x20); //push reg *3 and lea regA, [sreg + disp8]
					if (addr < 0)
						throw Error("Final Reg PUSHes missing");

					offset += 4 * 3; //3 PUSHes from that

					code = Exe.GetUint8(addr - 1);
					if (code >= 0x50 && code <= 0x57) //if additional PUSH reg is there before it
						offset += 4;
				}
				else
				{
					offset += 4 * 3; //It's always 3 arguments going into the function before the format
				}
			}

			$$(__ + '5.2 - Construct the function argument required (which contains the hairstyle number or a pointer to it - in the case of spr/act)')
			const arg = Exe.BuildDate < 20111108
				?  [sreg, offset + 4 * (isLast ? 1 : 2)]
				:  [sreg, offset + 4 * (isLast ? 2 : 5)]
				;

			offset = isLast ? 4 : 8;

			$$(__ + '5.3 - Construct our code')
			code =
				PUSH_EAX          //push eax
			+	ADD(ESP, offset)  //add esp, 4/8
			+	MOV(EAX, arg)     //mov eax, dword ptr [ARG.5/ARG.2 or ARG.2/ARG.1] ; latter for palette
			+	(!isLast
			?
				MOV(EAX, [EAX])   //mov eax, dword ptr [eax]
			:
				''
			)
			+	MOV([ESP], EAX)   //mov dword ptr [esp], eax
			+	SUB(ESP, offset)  //sub esp, 4/8
			+	POP_EAX           //pop eax
			+	PUSH(strVir)      //push offset <format string>
			+	JMP(Filler(1))    //jmp <retnAddr> ; Return Address is after the PUSH
			;

			$$(__ + '5.4 - Prepare the arguments for auto-hook')
			const args =
			{
				targets : {
					1 : Exe.Phy2Vir(hookAddr + 5, CODE)
				}
			};

			$$(__ + '5.5 - Add our code and jump to it from hookAddr')
			AutoHook(hookAddr, code, args);

			if (isLast && doramOn)
			{
				$$(__ + '6.1 - For doram palettes find the seperate format string')
				const newStrAddr = Exe.FindText("%s\\" + fmtPrefix + "%s_%s_%d.pal", PHYSICAL);

				if (newStrAddr > 0)
				{
					$$(__ + '6.2 - Change the second %s to %u')
					Exe.SetInt8(newStrAddr + 4 + fmtPrefix.length, 0x75);

					$$(__ + '6.3 - Find where it is PUSHed before the original format string PUSH')
					const newStrPush = PUSH(Exe.Phy2Vir(newStrAddr));
					const newHookAddr = Exe.FindLastHex(newStrPush, hookAddr, beginAddr);
					if (newHookAddr < 0)
						throw Error("Second palette format string not PUSHed");

					$$(__ + '6.4 - Construct the code for doram palette')
					const code =
						PUSH_EAX          //push eax
					+	ADD(ESP, 8)       //add esp, 8
					+	MOV(EAX, arg)     //mov eax, dword ptr [ARG.2/ARG.1]
					+	MOV([ESP], EAX)   //mov dword ptr [esp], eax
					+	SUB(ESP, 8)       //sub esp , 8
					+	POP_EAX           //pop eax
					+	newStrPush        //push offset "%s\<fmtPrefix>\%s_%s_%d.pal";
					+	JMP(Filler(1))    //jmp <newRetnAddr> ; after the original PUSH i.e. newHookAddr + 5
					;

					$$(__ + '6.5 - Prepare the arguments for auto-hook')
					const args =
					{
						targets : {
							1 : Exe.Phy2Vir(newHookAddr + 5, CODE)
						}
					};

					$$(__ + '6.6 - Add our code and jump to it from newHookAddr')
					AutoHook(newHookAddr, code, args);
				}
			}
		}
	});
};

///
/// \brief Makes the mid-headgears that depend on the hair styles use idx 1 when going over the max known value.
///
IncrHairs.stage2 = Warp.Execute([
	
	
	
	
	
	
	
	
	" 24 8D 27 80 34 04 00 00 E0 5E BC 65 99 61 2C 9D 75 90 90 B7 3E 98 6B 41 A9 76 1B 37 6B BE 1A 86 E1 F2 96 61 A1 B1 66 CA 9A 59 6F C4 A2 05 2E AB CB AE B3 78 AE 18 B6 9B D6 7E 37 57 46 FC 3E E3 0E DE 11 48 E2 E3 47 B6 28 2F B1 F0 C7 F8 C0 02 76 B8 BB DD 6F 00 4C 80 A7 AA 31 59 B7 FB 1B EE C2 92 CF 98 17 6A 2A 38 AD 77 76 7C 4D 46 08 6F 72 63 ED 4E FB 59 36 21 35 8D 11 E3 7E EC 64 59 A3 E0 49 77 E1 30 4B 31 A7 66 C2 A0 E3 F6 87 94 6E 4D 93 5F E8 6C 12 49 13 5A 45 24 48 57 55 F0 14 BD F3"
);

///
/// \brief Wrappers for individual patches
///
Allow65kHairs = IncrHairs;
IncrHairStyles = IncrHairs;
