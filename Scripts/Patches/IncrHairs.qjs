/**************************************************************************\
*                                                                          *
*   Copyright (C) 2013-2021 Ai4rei/AN                                      *
*   Copyright (C) 2013-2021 Neo-Mind                                       *
*                                                                          *
*   This file is a part of WARP project (specific to RO clients)           *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : Ai4rei/AN, Neo-Mind                                    *
*   Created Date  : 2021-02-24                                             *
*   Last Modified : 2021-08-22                                             *
*                                                                          *
\**************************************************************************/

///
/// \brief Makes the respective sprites & palettes use the acutal numbers instead of the hard-coded tables.
///
IncrHairs = function(patchName)
{
	this.stage1(patchName); //for the head sprites & palettes
	if (Exe.Version > 6)
		this.stage2(patchName); //for the mid-headgear sprites dependent on hairstyles.

	return true;
};

///
/// \brief Ignores the hard-coded hair style table and generate hair style IDs ad-hoc instead
///
IncrHairs.stage1 = patchName =>
{
	const _ = patchName + ' (Stage 1) : ';

	$$(_ + '1.1 - Find the format strings using a common part')
	const addrs = Exe.FindTextN("\\\xB8\xD3\xB8\xAE\xC5\xEB\\%s\\%s", PHYSICAL, false, false);
	if (addrs.isEmpty())
		throw Error("Format string(s) missing");

	$$(_ + '1.2 - Extract the string addresses')
	const strAddrs = addrs.map(addr => (Exe.GetUint8(addr - 1) > 0 ? addr - 6 : addr));

	$$(_ + '1.3 - Detect newer clients with Doram')
	const doramOn = addrs[0] == strAddrs[0];

	$$(_ + '1.4 - Find the format string for the palette (unless shared head palette is ON)')
	let addr = -1;
	const fmtPrefix = "\xB8\xD3\xB8\xAE\\\xB8\xD3\xB8\xAE";
	if (Exe.Version <= 9) //VC6 & VC9
		addr = Exe.FindText(fmtPrefix + "%s%s_%d.pal", PHYSICAL); //Old style used for VC6 and some initial VC9 clients

	if (addr < 0)
		addr = Exe.FindText(fmtPrefix + "%s_%s_%d.pal", PHYSICAL); //New style

	if (addr < 0)
		throw Error("Palette format string missing");

	$$(_ + '1.5 - Add to the strAddrs')
	strAddrs.push(addr);

	$$(_ + '1.6 - Get the limit from user or set it to 65k based on the patch')
	const isPalShared = Warp.GetPatchState("HeadPalMF") || Warp.GetPatchState("HeadPalUnisex");
	if (patchName === "IncrHairStyles")
	{
		IH_Max = Exe.GetUserInput('$maxHairs', D_Uint16, "Limit input", "Enter the maximum no of hairstyles", 100, {saveDefault: true});
		if (IH_Max === false)
			Cancel("Limit reverted to default");
	}
	else if (patchName === "Allow65kHairs")
	{
		IH_Max = 65535;
	}

	$$(_ + '2 - Prep the lambda function for fixing comparisons')
	const fixCmp = (addr) =>
	{
		if (IH_Max === 65535)
		{
			$$(_ + '2.1 - For highest limit just enforce the conditional jump after the CMP')
			Exe.SetJMP(addr + 3);
		}

		else if (IH_Max <= 0x7F)
		{
			$$(_ + '2.2 - For 1 byte limits directly alter the limit value used')
			Exe.SetInt16(addr + 2, IH_Max | 0x7C00); //7C to make it JLE in case it isnt.
		}

		else
		{
			$$(_ + '2.3 - For multi byte limits, extract the register used')
			const reg = R32.List[Exe.GetUint8(addr + 1) & 0x7];

			$$(_ + '2.4 - Prep code to compare')
			code =
				CMP(reg, IH_Max) //cmp reg, <maxHairs>
			+	JA(Filler(1))    //ja <defAddr>
			+	JMP(Filler(2))   //jmp <validAddr>
			;

			$$(_ + '2.5 - Find space for the code')
			const [free, freeVir] = Exe.FindSpace(code.byteCount());

			$$(_ + '2.6 - Fill in the blanks')
			code = SetFillTargets( code,
			{
				start : freeVir,
				    1 : Exe.Phy2Vir(addr + 5, CODE),
				    2 : Exe.GetTgtAddr(addr + 4, 1)
			});

			$$(_ + '2.7 - Add to allocated space')
			Exe.AddHex(free, code);

			$$(_ + '2.8 - Setup a JMP to the allocated space')
			Exe.SetJMP(addr, freeVir);
		}

		$$(_ + '2.9 - Change the default value to 2 instead of 0D or 6')
		let ins = Instr.FromAddr(addr + 5);
		ins.Immd = 2;
		Exe.SetHex(ins.Addr, ins);
	};

	$$(_ + '3 - Prep the lambda function for table fixes')
	const fixTbl = (addr) =>
	{
		$$(_ + '3.1 - Extract the instruction')
		let ins = Instr.FromAddr(addr);

		$$(_ + '3.2 - Update the ModRM to not use the 4*reg part')
		ins.MRM.update(null, null, ins.SIB.Base);

		$$(_ + '3.3 - Change the SIB to 90h (quick hack to set a NOP at end)')
		ins.SIB.Data = 0x90;

		$$(_ + '3.4 - Replace the instruction')
		Exe.SetHex(ins.Addr, ins);
	};

	strAddrs.forEach( (memAddr, idx) =>
	{
		const __ = `${_} [${idx}] `;

		const isLast = idx === strAddrs.length-1;

		if (!isLast || !isPalShared)
		{
			$$(__ + '4.1 - Retrieve the string & get the position of the 2nd %s')
			const fmt = Exe.GetText(memAddr);
			const pos = fmt.indexOf("%s", isLast ? 0 : fmt.indexOf("%s") + 1);

			$$(__ + '4.2 - Change the %s to %u')
			Exe.SetInt8(memAddr + pos + 1, 0x75);
		}

		$$(__ + '4.3 - Find where the string is used in a PUSH')
		const strVir = Exe.Phy2Vir(memAddr);
		const hookAddr = Exe.FindHex(PUSH(strVir));
		if (hookAddr < 0)
			throw Error("Format string not used");

		$$(__ + '4.4 - Retrieve the stack register')
		const sreg = ROC.StkReg; //EBP or ESP depending on FP

		$$(__ + '4.5 - Find the start of the function')
		let code, addr = -1, type; //type is used to find the stack offset later
		if (Exe.BuildDate < 20111000)
		{
			code = '';
			if (ROC.HasFP)
			{
				code +=
					FP_START               //push ebp
					                       //mov ebp, esp
				;
			}
			else
			{
				code +=
					isLast
				?	INT3                   //int3
					                       // OR
				:	PUSH_R                 //push regA
				;
			}

			code +=
				MOV(R32, [sreg, ' 0?']) //mov regA, dword ptr [ARG.2] or [ARG.1]
			;

			addr = Exe.FindLastHex(code, hookAddr, hookAddr - 0x200);
			type = 1;
		}
		if (addr < 0)
		{
			code =
				PUSH(-1)                //push -1
			+	PUSH(POS3WC)            //push offset#1
			+	MOV(EAX, FS, [0])       //mov eax, dword ptr fs:[0]
			+	PUSH_EAX                //push eax
			;

			addr = Exe.FindLastHex(code, hookAddr, hookAddr - 0x400);
			type = 2;
		}
		if (addr < 0)
			throw Error("Function start missing");

		$$(__ + '4.6 - Save the address after the code')
		const beginAddr = addr + code.byteCount();

		$$(__ + '4.7 - Find the limiting comparison for hairstyle')
		const prefix =
			" [01111.00] 05" //jl/js short _skip#1
		+	CMP(R32, WCp)    //cmp regA, <limit>
		;

		const suffix =
			" [011111.0] 0?" //jl/jle short _skip#2

		addr = Exe.FindHex(prefix + suffix, beginAddr, beginAddr + 0x50);
		if (addr < 0 && doramOn)
		{
			addr = Exe.FindHex(prefix + suffix, beginAddr + 0x100, beginAddr + 0x200);
		}
		if (addr < 0 && !isLast)
			throw Error("Limit checker missing");

		$$(__ + '4.8 - Fix the CMP')
		fixCmp(addr + 2);

		$$(__ + '4.9 - Repeat when doram specific section is present (only for the spr & act)')
		if (idx === 0 && doramOn)
		{
			addr = Exe.FindHex(prefix + suffix, addr + 5, addr + 0xB0);
			if (addr > 0)
				fixCmp(addr + 2);
		}

		$$(__ + '4.10 - Find the table assignments (MOV or LEA regA, [regB*4 + regC])')
		const isLEA = !isLast && strAddrs.length == 3 && Exe.BuildDate > 20110922;
		code = isLEA
			? LEA(R32, [4, R32, R32])
			: MOV(R32, [4, R32, R32])
			;

		$$(__ + '4.11 - Filter out the false matches')
		const addrs = Exe.FindHexN(code, beginAddr, hookAddr).filter(addr =>
		{
			const ins = Instr.FromAddr(addr);
			if (ins.BC_Disp > 0)
				return false;

			if (isLEA || strAddrs.length < 3)
				return true;

			const ins2 = ins.getNext();
			const ins3 = ins2.getNext();

			if (!isLast && ins2.Codes[0] === 0x52 && ins3.Codes[0] === 0x8B && ins3.SIB != undefined && ins3.SIB.Scale === 2) //PUSH EDX followed by MOV r32, [r32*4 + r32]
				return true;

			if (ins2.Codes[0] === 0x8B && ins2.BC_Disp > 0) //MOV regA, [regB + offset] followed by
			{
				if (ins3.Codes[0] === 0x52) //push edx
					return true;

				if (ins3.Codes[0] === 0x8B && ins3.BC_Disp === 1 && ins3.SIB == undefined) //or mov rega, [regb + disp8] where regB is not esp
					return true;
			}

			if (ins2.Codes[0] >= 0x50 && ins2.Codes[0] <= 0x57 && ins3.Codes[0] === 0x68) //push eax
				return true;                                                              //push offset <formatStr>

			return false;
		});

		if (addrs.isEmpty())
			throw Error("Table fetchers not found");

		$$(__ + '4.12 - Fix the tables')
		addrs.forEach( fixTbl );

		if (!isLast || !isPalShared)
		{
			$$(__ + '5.1 - Calculate the base stack offset for retrieving the argument')
			let offset;
			if (ROC.HasFP)
			{
				offset = 4; //for the 'push ebp'
			}
			else if (type === 1) //Older VC9 function signature
			{
				offset = 4 * 4; //there are 4 PUSHes in total. We could calculate it but seems like a waste.
			}
			else //Newer VC9 function signature
			{
				offset = 4 * 3; //for push -1, push offset#2 and push eax
				offset += Exe.GetInt8(beginAddr + 2); //from sub esp, immA

				code =
					PUSH_R.repeat(3)   //push regA
					                   //push regB
					                   //push regC
				+	MOV(EAX, [POS3WC]) //mov eax, dword ptr [offset#3]
				+	XOR(EAX, ESP)      //xor eax, esp
				+	PUSH_EAX           //push eax
				;
				addr = Exe.FindHex(code, beginAddr + 3, beginAddr + 0x20);
				if (addr < 0)
					throw Error("Register PUSHes missing");

				offset += 4 * 4; //4 PUSHes from that

				code = Exe.GetUint8(addr - 1);
				if (code >= 0x50 && code <= 0x57) //if additional PUSH reg is there before it
					offset += 4;

				if (Exe.BuildDate > 20111105)
				{
					addr = Exe.FindLastHex(PUSH_R.repeat(3) + LEA(R32, [sreg, WCp]), hookAddr, hookAddr - 0x20); //push reg *3 and lea regA, [sreg + disp8]
					if (addr < 0)
						throw Error("Final Reg PUSHes missing");

					offset += 4 * 3; //3 PUSHes from that

					code = Exe.GetUint8(addr - 1);
					if (code >= 0x50 && code <= 0x57) //if additional PUSH reg is there before it
						offset += 4;
				}
				else
				{
					offset += 4 * 3; //It's always 3 arguments going into the function before the format
				}
			}

			$$(__ + '5.2 - Construct the function argument required (which contains the hairstyle number or a pointer to it - in the case of spr/act)')
			const arg = Exe.BuildDate < 20111108
				?  [sreg, offset + 4 * (isLast ? 1 : 2)]
				:  [sreg, offset + 4 * (isLast ? 2 : 5)]
				;

			offset = isLast ? 4 : 8;

			$$(__ + '5.3 - Prep the hook code')
			code =
				PUSH_EAX          //push eax
			+	ADD(ESP, offset)  //add esp, 4/8
			+	MOV(EAX, arg)     //mov eax, dword ptr [ARG.5/ARG.2 or ARG.2/ARG.1] ; latter for palette
			+	(!isLast
			?
				MOV(EAX, [EAX])   //mov eax, dword ptr [eax]
			:
				''
			)
			+	MOV([ESP], EAX)   //mov dword ptr [esp], eax
			+	SUB(ESP, offset)  //sub esp, 4/8
			+	POP_EAX           //pop eax
			+	PUSH(strVir)      //push offset <format string>
			+	JMP(Filler(1))    //jmp <retnAddr> ; Return Address is after the PUSH
			;

			$$(__ + '5.4 - Allocate space for it')
			const [free, freeVir] = Exe.FindSpace(code.byteCount(), 0x10);

			$$(__ + '5.5 - Fill in the blanks')
			code = SetFillTargets( code, 1,
			{
				start : freeVir,
				    1 : Exe.Phy2Vir(hookAddr + 5, CODE)
			});

			$$(__ + '5.6 - Add at allocated space')
			Exe.AddHex(free, code);

			$$(__ + '5.7 - Create a JMP to our code')
			Exe.SetJMP(hookAddr, freeVir);

			if (isLast && doramOn)
			{
				$$(__ + '6.1 - For doram palettes find the seperate format string')
				const newStrAddr = Exe.FindText("%s\\" + fmtPrefix + "%s_%s_%d.pal", PHYSICAL);

				if (newStrAddr > 0)
				{
					$$(__ + '6.2 - Change the second %s to %u')
					Exe.SetInt8(newStrAddr + 4 + fmtPrefix.length, 0x75);

					$$(__ + '6.3 - Find where it is PUSHed before the original format string PUSH')
					const newStrPush = PUSH(Exe.Phy2Vir(newStrAddr));
					const newHookAddr = Exe.FindLastHex(newStrPush, hookAddr, beginAddr);
					if (newHookAddr < 0)
						throw Error("Second palette format string not PUSHed");

					$$(__ + '6.4 - Prep the hook code for doram palette')
					let code =
						PUSH_EAX          //push eax
					+	ADD(ESP, 8)       //add esp, 8
					+	MOV(EAX, arg)     //mov eax, dword ptr [ARG.2/ARG.1]
					+	MOV([ESP], EAX)   //mov dword ptr [esp], eax
					+	SUB(ESP, 8)       //sub esp , 8
					+	POP_EAX           //pop eax
					+	newStrPush        //push offset "%s\<fmtPrefix>\%s_%s_%d.pal";
					+	JMP(Filler(1))    //jmp <newRetnAddr> ; after the original PUSH i.e. newHookAddr + 5
					;

					$$(__ + '6.5 - Allocate space for it')
					const [free, freeVir] = Exe.FindSpace(code.byteCount(), 0x10);

					$$(__ + '6.6 - Fiil in the blanks')
					code = SetFillTargets( code, 1,
					{
						start : freeVir,
						    1 : Exe.Phy2Vir(newHookAddr + 5, CODE)
					});

					$$(__ + '6.7 - Add at allocated space')
					Exe.AddHex(free, code);

					$$(__ + '6.8 - Create JMP to our code')
					Exe.SetJMP(newHookAddr, freeVir);
				}
			}
		}
	});
};

///
/// \brief Makes the mid-headgears that depend on the hair styles use idx 1 when going over the max known value.
///
IncrHairs.stage2 = Warp.Execute([
	
,	
,	" 47 D0 F0 09 E8 71 D0 84 85 88 45 AC 34 04 00 00 8C 4C 4D 87 5E 3A 1B 80 86 28 AA 97 42 6C DD 9F C1 30 3F C7 D2 15 7E 27 67 30 92 D6 A7 A6 81 9F DC 87 1B 71 54 97 72 E4 31 C6 71 A1 EC 4F 8A 1C A4 E3 D5 7F 08 A7 1D FE 88 51 BD 1F 06 9C AB A0 46 18 68 6E 24 61 4A 52 5D 80 DD 09 09 A9 D5 F5 20 7D C2 19 EC 40 AB 63 6A 9D 60 EA 53 AB CE F6 8A 83 07 23 F5 CE EA 08 E4 BA 5A 4F E4 C4 91 DD 57 93 CF 26 27 02 14 AA A2 39 57 B7 C8 12 1B 50 46 3B DC 22 FD F6 11 49 3D 0B 4F 39 34 57 6E 58 B5 90 2F 8B C2 58 1B 31 78 9A 22 BC F1 7F 00 D1 A2 20 BD 89 9A 86 86 60 7B 12 ED C9 35 19 E1 D1 7D 9E 5F 12 EC DA 7A B7 2C 9D 88 6F D9 39 30 38 23 6E 8E F9 A8 DF 3C 9D 97 EB 0D 03 05 85 B7 15 48 BA 3B 22 97 3E AB 13 EB 5C 17 E9 9D 7B 3D 4F 95 4E 6B DA 43 9F 97 FD 2A 44 45 E3 02 94 8D CF 3D 08 A8 D2 6A FE 47 7A 1F 02 C9 70 09 4C FF F9 EF D1 D4 80 89 FF 21 F0 73 79 59 78 41 5B C4 1E 6C F9 0D 43 42 76 39 3B 28 44 E1 94 34 E4 0E 16 6E B7 48 10 ED 46 BF 0C D5 DD BE 16 B0 4D 03 D0 03 30 82 F9 AA 22 4A A4 C4 DF 6F 62 78 92 0F D2 81 0D 09 DF AC D2 40 3F 39 FC E9 BE 90 5D 27 2C 08 ED 3D 27 F2 D5 22 3F 6A 9D 02 2E 36 D1 2E 2E D3 8A BB 8D 55 C2 6A B7 26 1C 64 33 C7 BA 4C 9A 48 EF 77 82 09 7B FA EE 12 D7 F5 B9 CB 32 5B C9 10 E3 F5 BA 40 58 4D D5 33 4D D1 E5 F9 E0 0C F1 D4 8F 42 6D 18 47 78 4C 98 59 78 91 07 F2 79 BA FE 45 6E E9 2A 5E 24 D7 91 E6 28 82 20 46 B0 E9 4F 1D 29 56 C5 B0 1F DB 28 4A A1 47 53 61 0C 18 1F AB 7D DE 89 CC CE D3 31 B0 30 61 64 EE 75 22 9C F5 32 04 39 FC B1 D9 57 74 26 DA 2E 7F 64 09 F9 31 80 0D 4E E9 5C 77 17 5C 77 09"
,	" 7D C7 57 54 DF E4 1C 87 83 77 D8 64 E5 B3 FA 2B 00 6D D8 D8 11 B6 1D ED 11 8D BC 07 31 DD 89 B8 93 84 CD E2 53 AF A1 26 88 BB 7A 35 EA ED 1C 5C 41 37 86 07 48 1D BF 4A F6 46 A4 8B 4D 4A 0B 74 DE BB 18 3C 86 B0 11 64 F5 D9 10 7B 6A 45 5E 3D EE 46 1C 8E E0 C5 24 B9 81 33 67 99 57 17 25 27 DA 85 61 0E B5 DA 92 6D FF A0 CF 60 92 E8 E4 28 67 5C 7E FA 2B 51 AC E4 78 BF 1C 3D F8 7C 55 99 CF DB CB 98 D0 BE 00 40 74 8A 6D 3B C4 F1 E2 01 FD 36 17 0D F8 1F 22 65 12 A0 FA 5C C1 12 5B F8 3C 25 41 4D CC 7E CC 3C 98 54 4A 3A EF BA A5 51 3B 40 1F 74 0B 44 46 7D 44 1F 6A AD D8 7D 72 D1 36 45 FF D5 1C B2 F7 FA 60 C9 76 24 8A CE E5 E1 62 A0 2E C5 FF 1A B9 D5 AB 27 81 74 B4 82 48 DA 4D 8F 48 7A 5A 47 46 75 56 2D 08 9B F4 32 71 47 C4 AE BC 11 6C 17 46 1A 46 5F C7 BF 02 E8 AA DA 97 A0 CB DD 1E E0 29 EC 96 47 BA E6 E9 A2 C2 99 8A 6B 53 62 F0 38 E2 32 95 BD F2 94 95 0E 22 37 76 8A AD F4 44 2F E5 1F 1F 6E 31 37 27 D4 28 E3 00 CE E7 35 D8 9F 08 93 3E 7C C9 58 A9 AB 0B D3 EC 57 C7 AC EF 76 49 49 CD 82 E7 43 F7 33 34 A9 EB F4 81 FD 2D 6F CC 2C AA C3 1E 04 89 BD C6 7A F5 17 E3 27 71 69 B4 EC 29 88 DB 86 0A 79 3F F9 CD 28 32 0E 8A B5 BA E4 D0 F6 BD CB 02 15 23 BB CC 17 03 5B 98 AE 76 8A 88 CA 77 7D 5D 33 44 FD 4E D1 7B 28 7B E2 31 C4 CB 18 24 EF D8 12 CA E0 79 00 03 C1 E1 34 55 40 3D 4D 9B 21 88 76 30 B2 5C F9 FF 9F 69 9C 4F 55 62 7B 74 EC 45 13 DD 8A 4E 59 6D E8 2F D1 09 F4 33 CA 95 C1 59 7B BA BB CD 3E 7D 58 A3 85 2F A5 57 37 B3 71 7D 10 25 1F 1D AA B7 27 D8 28 8F C1 45 38 6C DD 67 97 F2 97 79 8A 8F F5 7A CB 10 BF AE DA C4 F6"
,	
,	" 8F 47 05 8D BB 9C D8 FA 9A B1 4A 65 D8 AB 26 AD 46 84 17 51 7C 90 A0 0E 8E 0E EE 03 E0 BC 49 82 15 EB CE 2E 79 DD EC 37 91 E8 7D 8A 1D 2D 62 51 A3 90 F3 2E C4 80 9B C2 11 B2 41 84 7F 0F 33 C4 45 1B A5 E6 85 ED AD 36 36 DB 2F 02 90 D2 21 31 33 02 B5 16 A7 DE FA 79 24 FD AB EA 09 FC F4 92 9A 3B BE 26 16 E1 FF 8C B2 81 96 87 51 81 1F B2 9C CB CA C4 50 CD 45 68 BC 64 2A 6D DF 5B 10 67 67 DD B7 29 82 E9 DF 02 B3 47 C6 B7 D4 49 C0 DC EB E2 9D B5 94 1E 40 55 41 6E A3 3F EE 92 EA EA 09 2B B8 83 33 28 A1 51 53 A6 1F 91 7E 7C 73 E0 EA 29 35 7D 2E 70 4A 31 D7 6C 8E A5 9F 11 23 F1 69 A6 4D F1 58 E1 56 12 BE 9A D3 E2 F3 8D A9 BA 6E 14 2E F0 99 96 35 B9 6D FA 52 B9 DA 96 1C 4D AC C8 20 72 4F 4D 49 44 9C 31 4E 5F 1E 63 FB F4 E0 19 58 C7 AD F9 C1 69 93 88 E0 A5 DB 3C E1 36 52 5D BA A4 B1 16 0A 76 95 33 1C 3D 51 BF 7B C3 75 0F B5 6A 7E FC 50 49 F6 2A 0F BF EE 88 BD 18 86 47 87 DE 67 03 01 6F 7F 5F 77 D7 42 62 FA 24 D5 85 C9 DC 92 83 D8 1C E8 25 88 F4 A0 26 41 3A E4 CE 38 0E B7 59 B1 21 A9 31 ED 51 6C 10 6C 55 85 34 03 95 AC E8 BB 11 DB 0C 41 D9 11 F5 2C B2 28 CA 5C BE 0E 5D EF 64 AA E8 A3 EF C8 C9 07 A2 13 2D 58 92 A0 F4 1F AE 6B 2C 4B 8A E9 00 C2 55 2B FF DE 16 9A 7D 27 94 38 2C C5 B5 13 0C 7C 04 62 AD 8C 03 A9 2D B0 F6 F8 1D CF 51 F4 4D 5A 1A A3 E8 1D 50 EC 65 75 D0 5A 75 80 16 D9 1D A1 4F 4D E9 34 97 00 3B A3 C5 5C D7 D5 B5 6D 9D D3 CF 3E DC C8 C7 68 8F D8 3A 89 A0 2B 06 45 1A CD 48 88 E7 2B 29 EF 1F DA 02 6D B0 2C CD FF 15 2A B9 82 9E F5 6F 85 DF 67 04 1A 26 5C 78 87 4C 92 17 EA 92 FC DE CF 7B A6 F0 C4 71 C3 CE"
,	
,	
,	" 49 48 5F 53 74 61 67 65 32"
);

///
/// \brief Wrappers for individual patches
///
Allow65kHairs = IncrHairs;
IncrHairStyles = IncrHairs;
