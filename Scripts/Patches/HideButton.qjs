/**************************************************************************\
*                                                                          *
*   Copyright (C) 2015-2020 Neo-Mind                                       *
*                                                                          *
*   This file is a part of WARP project (specific to RO clients)           *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : Neo-Mind                                               *
*   Created Date  : 2020-11-10                                             *
*   Last Modified : 2020-12-07                                             *
*                                                                          *
\**************************************************************************/

///
/// \brief Data to be used in patches
///
if (typeof HB_Data === 'undefined')
{
	HB_Data =
	{
		HideNavBtn :
		{
			strings : [
				"navigation_interface\\btn_Navigation",
				"RO_menu_icon\\navigation"
			],
			zeroPrefix: false	
		},

		HideBgBtn :
		{
			strings: [
				"basic_interface\\btn_battle_field",
				"RO_menu_icon\\battle"
			],
			zeroPrefix: false
		},

		HideBankBtn :
		{
			strings: [
				"basic_interface\\btn_bank",
				"RO_menu_icon\\bank"
			],
			zeroPrefix: false
		},

		HideBookBtn :
		{
			strings: [
				"basic_interface\\booking",
				"RO_menu_icon\\booking"
			],
			zeroPrefix: false
		},

		HideRodexBtn :
		{
			strings: ["RO_menu_icon\\mail"],
			zeroPrefix: false
		},

		HideAchieveBtn :
		{
			strings: ["RO_menu_icon\\achievement"],
			zeroPrefix: false
		},

		HideRecordBtn :
		{
			strings: [
				"replay_interface\\rec",
				"RO_menu_icon\\rec"
			],
			zeroPrefix: false
		},

		HideMapBtn :
		{
			strings: ["map"],
			zeroPrefix: true
		},

		HideQuestBtn :
		{
			strings: ["quest"],
			zeroPrefix: true
		},
	};
}

///
/// \brief Take necessary action to hide the button specified by the image suffix argument
///        For the first 7, Zero out the first match amongst the suffix arg specific
///        For the remaining, Change the specified prefix assignment in the UIBasicWnd::OnCreate function to use the ending NULL instead
///
HideButton = function(patchName)
{
	/// 1.1 - Retrieve the data for the patch name
	let data = HB_Data[patchName];

	if (!data.zeroPrefix)
	{
		/// 1.2 - Zero it out for the ones without zeroPrefix
		Exe.SetInt8(data.strPhy, 0);
	}
	else
	{
		/// 2.1 - Find the string 'skill' (needed since some prefixes are matching multiple areas)
		let refAddr = Exe.FindText("skill");
		if (refAddr < 0)
			throw Error("'skill' not found");

		let refHex = refAddr.toHex();

		/// 2.2 - Find where 'skill' is assigned (inside UIBasicWnd::OnCreate)
		let code = MOV([]); //MOV DWORD PTR
		let addr = Exe.FindHex(refHex + code);

		if (addr < 0)
		{
			code = LEA(); //LEA
			addr = Exe.FindHex(refHex + code);
		}
		if (addr < 0)
			throw Error("'skill' not assigned");

		/// 2.3 - Extract the needed parts from data
		let {strVir, strings} = data;

		/// 2.4 - Find the prefix assignment after 'skill' assignment
		let arg = strings[0];

		addr = Exe.FindHex( strVir.toHex() + code, addr + 5, addr + (Exe.BuildDate > 20140210 ? 0x200 : 0x50));
		if (addr < 0)
			throw Error(`'${arg}' not assigned`);

		/// 2.5 - Change the address to point to the ending NULL
		Exe.SetInt32(addr, strVir + arg.length);
	}

	return true;
};

///
/// \brief Disable for Unsupported Clients - Check for Button bmp
///
HideButton.validate = function(patchName)
{
	/// 1.1 - Ensure the clients are using the older style of buttons
	if (ROC.AdvAgencyAddr > 0)
		return false;
	
	/// 1.2 - Retrieve the data based on the patch name
	let {strings, zeroPrefix} = HB_Data[patchName];

	/// 2.1 - Find the first match amongst the strings specified
	let addr = -1;
	strings.find( str =>
	{
		addr = Exe.FindText(str, PHYSICAL, zeroPrefix);
		return (addr > 0);
	});

	/// 2.2 - When found save it into HB_Data . Also save the VIRTUAL address if zeroPrefix is ON since we need it.
	if (addr > 0)
	{
		HB_Data[patchName].strPhy = addr;
		if (zeroPrefix)
			HB_Data[patchName].strVir = Exe.Phy2Vir(addr);

		return true;
	}
	else
	{
		return false;
	}
};

///
/// \brief Wrappers for individual patches
///
HideNavBtn     = HideButton;
HideBgBtn      = HideButton;
HideBankBtn    = HideButton;
HideBookBtn    = HideButton;
HideRodexBtn   = HideButton;
HideAchieveBtn = HideButton;
HideRecordBtn  = HideButton;
HideMapBtn     = HideButton;

HideQuestBtn = patchName => HideButton(patchName);
HideQuestBtn.validate = patchName =>
	ROC.Post2010 && HideButton.validate(patchName);
