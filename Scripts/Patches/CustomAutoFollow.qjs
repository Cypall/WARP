/**************************************************************************\
*                                                                          *
*   Copyright (C) 2020 Functor                                             *
*   Copyright (C) 2020-2021 Neo Mind                                       *
*   Copyright (C) 2018-2021 CH.C (jchcc)                                   *
*                                                                          *
*   This file is a part of WARP project (specific to RO clients)           *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : Functor, Neo-Mind, CH.C (jchcc)                        *
*   Created Date  : 2020-11-11                                             *
*   Last Modified : 2021-07-04                                             *
*                                                                          *
\**************************************************************************/

///
/// \brief NOP out codes for disabling the CGameMode::m_lastLockOnPcGid assignment to ignore shift right click.
///        The assignment occurs inside CGameMode::ProcessPcPick function.
///
NoAutoFollow = function()
{
	let _ = 'NoAutoFollow : ';

	$$(_ + '1.1 - Ensure that \'Restore Auto Follow\' patch is not selected (unless in test mode)')
	if (!Warp.TestMode)
		Warp.SetPatchState('RestoreAutoFollow', false);

	$$(_ + '1.2 - Find the m_lastLockOnPcGid assignment (matches multiple locations)')
	let prefix =
		PUSH_1               //push 1
	+	PUSH(' [00011..0]')  //push 1Ah / push 1Ch
	+	(Exe.Version < 14
	?
		MOV(ECX, ESI)        //mov ecx, esi
	:
		""
	)
	+	(Exe.Version === 9 || Exe.Version === 10
	?
		CALL(R32)            //call regA
	:
		CALL([R32, WCp])     //call dword ptr [regA + dispA]
	);

	let reg = Exe.Version < 9 ? R32 : EAX;
	prefix +=
		MOV(reg, [R32, POS2WC]) //mov regD, dword ptr [regC + dispC]  ; regD is eax for VC9+
	;

	let suffix =
		MOV([POS4WC], reg)      //mov dword ptr [CGameMode::m_lastLockOnPcGid], regD
	;

	let addr = Exe.FindHex(prefix + suffix);
	if (addr < 0)
		throw Error("No matches found for assignment");

	$$(_ + '2 - NOP out the assignment')
	let ins = Instr.FromAddr(addr + prefix.byteCount());
	Exe.SetNOPs(ins.Addr, ins.Size);

	return true;
};

///
/// \brief Change the limit value used for comparison against lastFollowTime
///
DecrAFDelay = function()
{
	let _ = 'DecrAFDelay : ';

	$$(_ + '1.1 - Find the delay comparisons')
	let reg = Exe.Version > 6 ? EDI : EBX
	let code =
		CALL(reg)           //call edi / call ebx           ; [<&WINMM.timeGetTime>]
	+	SUB(EAX, [POS4WC])  //sub eax, dword ptr [offset#1] ; lastFollowTime
	+	CMP(EAX, 0x3E8)     //cmp eax, 3E8h                 ; 1000ms
	;

	let addrs = Exe.FindHexN(code);
	if (addrs.isEmpty())
		throw Error("Delay comparison missing");

	$$(_ + '1.2 - Find the register movement before it to find the correct match')
	let movReg = MOV(reg, [POS3WC]); //mov regA, dword ptr [<&WINMM.timeGetTime>] ; regA is edi / ebx
	let addr = addrs.find( memAddr =>
		Exe.FindLastHex(movReg, memAddr, memAddr - 0x20) > 0
	);
	if (!addr)
		throw Error("No matches found");

	$$(_ + '2.1 - Get the new value from the user')
	let newDelay = Exe.GetUserInput('$followDelay', D_Uint32, "Delay Value", "Enter the new autofollow delay", 1000, {max: 1000});
	if (newDelay === false)
		Cancel("Delay", 1000);

	$$(_ + '2.2 - Replace the old value')
	Exe.SetFromVar(addr + code.byteCount() - 4, '$followDelay');

	return true;
};
