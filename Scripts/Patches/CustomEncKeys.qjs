/**************************************************************************\
*                                                                          *
*   Copyright (C) 2013 Shakto                                              *
*   Copyright (C) 2013-2021 Neo-Mind                                       *
*                                                                          *
*   This file is a part of WARP project (specific to RO clients)           *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : Shakto, Neo-Mind                                       *
*   Created Date  : 2020-11-08                                             *
*   Last Modified : 2021-07-04                                             *
*                                                                          *
\**************************************************************************/

/// \brief Array of the patch names to use later
PktKeyPatches = ["CustomFirstKey", "CustomSecondKey", "CustomThirdKey"];

///
/// \brief Replaces the key PUSHed or Hijack the KeySetter function to
///        use our code for assigning the keys. Choice is made based on PACKET.KS_Mode
///
CustomEncKeys = function(patchName)
{
	let _ = patchName + ' : ';

	$$(_ + '1.1 - Ensure the \'Disable Packet Encryption\' patch is unselected. Not applicable for test mode')
	if (!Warp.TestMode)
		Warp.SetPatchState("NoPacketEncr", false);

	$$(_ + '1.2 - Discern the Variable name and index based on patchName')
	let index = PktKeyPatches.indexOf(patchName);
	let varName = "$" + ["first", "second", "third"][index] + "key";

	$$(_ + '1.3 - Ensure the PACKET object has been loaded')
	PACKET.load();

	$$(_ + '1.4 - Get the new key from user')
	let oldKey = PACKET.Keys[index].toHex(4, true); //need in BE format
	let newKey = Exe.GetUserInput(varName, D_Hex, "Packet Keys", "Enter the new packet key", oldKey, {minLen: 4, maxLen: 4});

	if (newKey === false || newKey === oldKey)
		Cancel("No new key specified");

	if (PACKET.KS_Mode === KeyMode.Push) //Direct PUSHes
	{
		$$(_ + '2.1 - For Direct Key PUSHes, find all locations where it occurs')
		let code =
			PUSH(PACKET.Keys[2])  //push <key3>
		+	PUSH(PACKET.Keys[1])  //push <key2>
		+	PUSH(PACKET.Keys[0])  //push <key1>
		+	CALL()                //call CRagConnection::InitKeys
		;
		let csize = code.byteCount();

		$$(_ + '2.2 - Update the respective PUSHed key with the new one in all such locations')
		Exe.FindHexN(code).forEach( addr =>
			Exe.SetFromVar(addr + csize - 5*(index + 1), varName)
		);

		return true;
	}
	else //Keys are assigned inside ObfuscateOrInit mixed function
	{
		$$(_ + '3.1 - Fill the Patch Data with the existing keys if its empty')
		if (PACKET.PatchData.isEmpty())
		{
			PACKET.PatchData[0] = PACKET.Keys[0];
			PACKET.PatchData[1] = PACKET.Keys[1];
			PACKET.PatchData[2] = PACKET.Keys[2];
		}

		$$(_ + '3.2 - Set the appropriate index of the Data to the new key')
		PACKET.PatchData[index] = parseInt(newKey, 16);

		$$(_ + '3.3 - Run the helper function to make the changes in client')
		return _CEK_SetupObfuscate(index);
	}
};

///
/// \brief Disable for unsupported clients
///
CustomEncKeys.validate = HasPktKeys;

///
/// \brief Move the insert operation to any of the other active Packet key patches
///
CustomEncKeys.cleanup = function(patchName)
{
	let _ = patchName + '.cleanup : ';

	$$(_ + '1.1 - Check if the 4th element is defined. Skip if not defined')
	if (PACKET.PatchData.isEmpty() || !PACKET.PatchData[3])
		return;

	$$(_ + '1.2 - Get the index')
	let index = PktKeyPatches.indexOf(patchName);

	$$(_ + '1.3 - Reset the specific key to default one')
	PACKET.PatchData[index] = PACKET.Keys[index];

	$$(_ + '2.1 - Set one of the other Packet Key patches as active if they are selected')
	if (PACKET.PatchData[4] === index)
	{
		let newIdx = PktKeyPatches.findIndex( name => Warp.GetPatchState(name) );
		if (newIdx < 0)
		{
			$$(_ + '2.2 - If no other patch is selected then clear the data')
			PACKET.PatchData = [];
			return;
		}

		PACKET.PatchData[4] = newIdx;
	}

	$$(_ + '2.3 - Otherwise set the patch for the different index as the current one and rerun _PK_SetupObfuscate function')
	if (!PACKET.PatchData.isEmpty() && PACKET.PatchData[4] !== index)
	{
		Exe.ClearPatch(patchName);
		Exe.SetActivePatch(patchName);

		// no need to run the entire PacketKeys function, since we have all relevant data saved
		_CEK_SetupObfuscate(PACKET.PatchData[4]);
	}
};

///
/// \brief Wrappers for individual patches
///
CustomFirstKey  = CustomEncKeys;
CustomSecondKey = CustomEncKeys;
CustomThirdKey  = CustomEncKeys;

///
/// \brief Helper function which modifies the ObfuscateOrInit function to use the new packet key specified
///
_CEK_SetupObfuscate = function(index)
{
	let _ = `_CEK_SetupObfuscate (${index}) : `;

	$$(_ + '1.1 - Prepare suffix with Stack restore & RETN')
	let suffix =
		(ROC.HasFP ? POP(EBP) : NOP)  //pop ebp / nop
	+	RETN(4)                       //retn 4
	;

	$$(_ + '1.2 - For virtualized function, add the encryption and zero assigning codes as well, since we need to replicate the entire function')
	let code = "";
	if (PACKET.KS_Mode === KeyMode.Virtual)
	{
		let parts =
		[
			ROC.HasFP
		?
			MOV(EAX, [EBP, 8])    //mov eax, dword ptr [ARG.1] ;  ARG.1 = ebp+8 with FP & esp+4 without FP
		:
			MOV(EAX, [ESP, 4])

		,//1

			TEST(EAX, EAX)        //test eax, eax
		+	JNE(Filler(1,1))      //jne short _init
		+	MOV(EAX, [ECX, 8])    //mov eax, dword ptr [ecx+8]
		+	IMUL(EAX, [ECX, 4])   //imul eax, dword ptr [ecx+4]
		+	ADD(EAX, [ECX, 0xC])  //add eax, dword ptr [ecx+0Ch]
		+	MOV([ECX, 4], EAX)    //mov dword ptr [ecx+4], eax
		+	SHR(EAX, 0x10)        //shr eax, 10h
		+	AND(EAX, 0x7FFF)      //and eax, 7FFFh
		+	suffix                //pop ebp / nop
		                          //retn 4
		,//2
			CMP(EAX, 1)           //cmp eax, 1 <= _init
		+	JE(Filler(2,1))       //je short _assign
		+	XOR(EAX, EAX)         //xor eax, eax
		+	MOV([ECX, 0x4], EAX)  //mov dword ptr [ecx+4], eax
		+	MOV([ECX, 0x8], EAX)  //mov dword ptr [ecx+8], eax
		+	MOV([ECX, 0xC], EAX)  //mov dword ptr [ecx+0Ch], eax
		+	suffix                //pop ebp / nop
		                          //retn 4
		];

		let offsets = MapAddrs(0, parts);
		code += SetFillTargets(parts,
		{
			1: offsets[2], //_init
			2: offsets[3]  //_assign
		}, 0, 1, 1);
	}

	$$(_ + '1.3 - Add the code for assigning the Initial packet keys')
	code +=
		MOV([ECX, 0x4], PACKET.PatchData[0])  //mov dword ptr [ecx+4], <key1>  ; _assign
	+	MOV([ECX, 0x8], PACKET.PatchData[1])  //mov dword ptr [ecx+8], <key2>
	+	MOV([ECX, 0xC], PACKET.PatchData[2])  //mov dword ptr [ecx+0Ch], <key3>
	+	XOR(EAX, EAX)                         //xor eax, eax
	+	suffix
	;
	let csize = code.byteCount();

	if (PACKET.PatchData[3] ?? false)
	{
		$$(_ + '2.1 - If 4th element (insertion address) is already defined, clear the other patches')
		PktKeyPatches.forEach( (name, i) =>
		{
			if (i !== index)
				Exe.ClearPatch(name);
		});
	}
	else
	{
		$$(_ + '2.2 - If 4th element is not defined then Allocate space for adding the code')
		PACKET.PatchData[3] = Exe.FindSpace(csize, 0x10)[0];
	}

	$$(_ + '2.3 - Add the code at allocated space')
	Exe.AddHex(PACKET.PatchData[3], code);

	$$(_ + '2.4 - Create a JMP to the allocated space from PACKET.Assigner')
	Exe.SetJMP(PACKET.Assigner, PACKET.PatchData[3], PHYSICAL);

	$$(_ + '2.5 - Save the index as the 5th element')
	PACKET.PatchData[4] = index;

	return true;
};
