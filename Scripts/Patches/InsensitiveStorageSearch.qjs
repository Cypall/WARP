/**************************************************************************\
*                                                                          *
*   Copyright (C) 2019-2021 CH.C (jchcc)                                   *
*                                                                          *
*   This file is a part of WARP project (specific to RO clients)           *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : CH.C (jchcc)                                           *
*   Created Date  : 2020-11-12                                             *
*   Last Modified : 2021-10-26                                             *
*                                                                          *
\**************************************************************************/

///
/// \brief Make the client use StrStrIA instead of _mbsstr to enable case-insensitive search in storage
///
InsensitiveStorageSearch = function()
{
	const _ = 'InsensitiveStorageSearch';

	$$(_ + '1.1 - Ensure the required functions are available')
	ROC.findImports();

	$$(_ + '1.2 - Find string search for storage')
	const prefix =
		PUSH(ECX)               //push ecx
	+	(Exe.Version > 11
	?
		CMOVNB(EAX, [EBP, WCn]) //cmovnb eax, dword ptr [ebp - dispA]
	:
		''
	)
	+	PUSH_EAX                //push eax
	;

	const suffix =
		CALL([POS4WC])          //call dword ptr [_mbsstr]
	+	ADD(ESP, 8)             //add esp, 8
	+	TEST(EAX, EAX)          //test eax, eax
	+	JE(4)                   //je short _skip ; after the JMP below
	+	MOV(ESI, [ESI])         //mov esi, dword ptr [ESI]
	+	JMP(WCp)                //jmp short _next
	;

	let addr = Exe.FindHex(prefix + suffix);
	if (addr < 0)
		throw Error("String search not found");

	addr += prefix.byteCount();

	$$(_ + '1.3 - Extract the CALL & Stack restore afterwards i.e. add esp, 8')
	const callNrestore = Exe.GetHex(addr, 9);

	$$(_ + '1.4 - Save the VIRTUAL address after the stack restore')
	const retnAddr = Exe.Phy2Vir(addr + 9, CODE);

	$$(_ + '2.1 - Construct our code')
	const parts =
	[
		CMP([Filler(1)], 0)       //cmp dword ptr [StrStrIA], 0
	+	JNE(Filler(2,1))          //jne short _strAvailable
	+	CALL(12)                  //push <nextAddr> + jmp
	+	"Shlwapi.dll\x00".toHex() //ASCII "Shlwapi.dll"
	+	CALL([ROC.GetModHandle])  //call dword ptr [<&KERNEL32.GetModuleHandleA>]
	+	CALL(9)                   //push <nextAddr> + jmp
	+	"StrStrIA\x00".toHex()    //ASCII "StrStrIA"
	+	PUSH_EAX                  //push eax
	+	CALL([ROC.GetProcAddr])   //call dword ptr [<&KERNEL32.GetProcAddress>]
	+	TEST(EAX, EAX)            //test eax, eax
	+	JNE(Filler(3,1))          //jne short _gotStr
	+	callNrestore              //call dword ptr [_mbsstr]
		                          //add esp, 8
	+	JMP(Filler(4))            //jmp <retnAddr>

	,//1
		MOV([Filler(1)], EAX)     //mov dword ptr [StrStrIA], eax ; _gotStr

	,//2
		CALL([Filler(1)])         //call dword ptr [StrStrIA] ; _strAvailable
	+	JMP(Filler(4))            //jmp <retnAddr>

	,//3
		ALL00                     //will be used to store [StrStrIA]
	];

	const [,_gotStr, _strAvailable, StrStrIA, allocSize] = MapAddrs(parts);

	$$(_ + '2.2 - Prepare the arguments for auto-hook')
	const args =
	{
		allocSize,
		values : {
			1 : StrStrIA
		},
		localTgts : {
			'2,1' : _strAvailable,
			'3,1' : _gotStr
		},
		targets : {
			4 : retnAddr
		},
		nops : 4 //for clean edit
	};

	$$(_ + '2.3 - Add our code and jump to it from addr')
	AutoHook(addr, parts, args);

	return true;
};

///
/// \brief Disable for older clients. _mbsstr is not being used in them
///
InsensitiveStorageSearch.validate = () =>
	Exe.BuildDate > 20150512;
