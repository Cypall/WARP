/**************************************************************************\
*                                                                          *
*   Copyright (C) ?-2015 Shinryo                                           *
*   Copyright (C) 2020-2021 Andrei Karas (4144)                            *
*                                                                          *
*   This file is a part of WARP project (specific to RO clients)           *
*                                                                          *
*   WARP is free software: you can redistribute it and/or modify           *
*   it under the terms of the GNU General Public License as published by   *
*   the Free Software Foundation, either version 3 of the License, or      *
*   (at your option) any later version.                                    *
*                                                                          *
*   This program is distributed in the hope that it will be useful,        *
*   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
*   GNU General Public License for more details.                           *
*                                                                          *
*   You should have received a copy of the GNU General Public License      *
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.  *
*                                                                          *
*                                                                          *
|**************************************************************************|
*                                                                          *
*   Author(s)     : Shinryo, Andrei (4144)                                 *
*   Created Date  : 2020-11-06                                             *
*   Last Modified : 2021-07-04                                             *
*                                                                          *
\**************************************************************************/

///
/// \brief Data to be used for the patch
///
if (typeof IZ_Data === 'undefined') //avoid redefinition
{
	IZ_Data =
	{
		Zoom25Percent : ( 256.0 .toIEEE()), //0x43800000
		Zoom50Percent : ( 510.0 .toIEEE()), //0x43FF0000
		Zoom75Percent : ( 816.0 .toIEEE()), //0x444C0000
		ZoomMax       : (1224.0 .toIEEE()), //0x44990000
	};
}

///
/// \brief Modify the Max Height from Ground (FAR_DIST) to accomodate for larger zoom
///
IncrZoom = function(patchName)
{
	let _ = patchName + ' : ';

	$$(_ + '1.1 - Find the FAR_DIST location')
	let code =
		(230.0).toIEEE()    //dd float 230.000 (0x43660000) <- NEAR_DIST
	+   (400.0).toIEEE()    //dd float 400.000 (0x43C80000) <- FAR_DIST
	+   (300.0).toIEEE()    //dd float 300.000 (0x43960000) <- FAR_DIST for Indoors
	;

	let addr = Exe.FindHex(code, Exe.GetSectBegin(DATA), Exe.FileSize);//It may or may not be limited to end of data section
	if (addr < 0)
		throw Error("FAR_DIST storage not found");

	$$(_ + '1.2 - Retrieve the new distance for the patch')
	let newDist = IZ_Data[patchName];

	$$(_ + '1.3 - Change to the value specified')
	Exe.SetHex(addr + 4, newDist);

	$$(_ + '2.1 - Find \'/zoom\'')
	if (Exe.FindText("/zoom", CASE_INSENSITIVE, PHYSICAL) > 0)
	{
		// If present, then we need some additional patching done - 4144

		$$(_ + '2.2 - Retrieve the VIRTUAL address where we patched')
		let distAddr = Exe.Phy2Vir(addr + 4);

		$$(_ + '2.3 - Search for an assignment to this address - enabled /zoom (we are looking for 2 matches, 1 from UIGraphicSettingWnd_virt136 & 1 from CGameMode_func')
		let mov1 = MOV([distAddr], (480.0).toIEEE()); //mov dword ptr [distAddr], 43F00000h ; 480.0
		let addrs = Exe.FindHexN(mov1);
		if (addrs.length < 2 || addrs.length > 3)
			throw Error("Unexpected no of matches found for 1st /zoom assignment");

		$$(_ + '2.4 - Change the assigned value to our new distance value')
		addrs.forEach( addr => Exe.SetHex(addr + 6, newDist) );

		$$(_ + '2.5 - Search for similar assignment to this address - disabled /zoom (it will be in the same functions as before)')
		let mov2 = MOV([distAddr], (400.0).toIEEE()); //mov dword ptr [distAddr], 43C80000h ; 400.0

		addrs = Exe.FindHexN(mov2);
		if (addrs.length < 2 || addrs.length > 3)
			throw Error("Unexpected no of matches found for 2nd /zoom assignment");

		$$(_ + '2.6 - Repeat 2.4 for this set of addresses')
		addrs.forEach( addr => Exe.SetHex(addr + 6, newDist) );

		$$(_ + '3.1 - Find the \'/zoom\' enabled/disabled load configuration (in CSession_lua_configuration)')
		let parts = [
			MOVSS(XMM1, [POS4WC])  //movss xmm1, dword ptr [zoom_max_load_enabled]

		,//1
			Exe.Version > 11
		?
			mov1                   //mov dword ptr [distAddr], 0x43F00000 ; 480.0
		+	JMP(0x12)              //jmp short _next
		:
			JMP(8)                 //jmp short _next

		,//2
			MOVSS(XMM1, [POS4WC])  //movss xmm1, dword ptr [zoom_max_load_disabled]

		,//3
			(Exe.Version > 11
		?
			mov2                   //mov dword ptr [distAddr], 43C80000h ; 400.0
		:
			''
		)
		+	MOVSS(XMM0, [POS4WC])  //movss xmm0, dword ptr [some_addr] ; _next
		+	MOVSS(XMM2, [POS4WC])  //movss xmm2, dword ptr [g_outdoorViewLatitude]
		+	COMISS(XMM0, XMM2)	   //comiss xmm0, xmm2

		,//4
			Exe.Version <= 11
		?
			MOVSS([POS4WC], XMM1)  //movss dword ptr [zoom2_max_outdoor], xmm1
		:
			''
		];

		addr = Exe.FindHex(parts);
		if (addr < 0)
			throw Error("/zoom configuration missing");

		$$(_ + '3.2 - Retrieve the zoom_max_load_enabled & zoom_max_load_disabled VIRTUAL addresses')
		let enbAddr = Instr.FromAddr(addr).Disp;
		let disAddr = Instr.FromAddr(addr + parts.byteCount(0, 1)).Disp;

		$$(_ + '3.3 - Overwrite the values at both locations with the new distance')
		Exe.SetHex(Exe.Vir2Phy(enbAddr), newDist);
		Exe.SetHex(Exe.Vir2Phy(disAddr), newDist);
	}

	return true;
};

///
/// \brief Wrappers for individual patches
///
Zoom25Percent = IncrZoom;
Zoom50Percent = IncrZoom;
Zoom75Percent = IncrZoom;
ZoomMax       = IncrZoom;
